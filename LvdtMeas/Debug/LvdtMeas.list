
LvdtMeas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fec  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b4  080085b4  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080085b4  080085b4  0000a05c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080085b4  080085b4  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b4  080085b4  000095b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085b8  080085b8  000095b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080085bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a05c  2**0
                  CONTENTS
 10 .bss          00001198  2000005c  2000005c  0000a05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011f4  200011f4  0000a05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001351d  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a76  00000000  00000000  0001d5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  00020020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  00021108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001da7d  00000000  00000000  00021e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c38  00000000  00000000  0003f8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af220  00000000  00000000  000554ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010470f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d6c  00000000  00000000  00104754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001094c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800815c 	.word	0x0800815c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	0800815c 	.word	0x0800815c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <ls_sine_calcSine>:





void ls_sine_calcSine(uint16_t * signal, float dw, int nrPoints, float * amp, float * phase, float * offset){
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	f6ad 0d84 	subw	sp, sp, #2180	@ 0x884
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	f507 6408 	add.w	r4, r7, #2176	@ 0x880
 8000b60:	f6a4 046c 	subw	r4, r4, #2156	@ 0x86c
 8000b64:	6020      	str	r0, [r4, #0]
 8000b66:	f507 6008 	add.w	r0, r7, #2176	@ 0x880
 8000b6a:	f5a0 6007 	sub.w	r0, r0, #2160	@ 0x870
 8000b6e:	ed80 0a00 	vstr	s0, [r0]
 8000b72:	f507 6008 	add.w	r0, r7, #2176	@ 0x880
 8000b76:	f6a0 0074 	subw	r0, r0, #2164	@ 0x874
 8000b7a:	6001      	str	r1, [r0, #0]
 8000b7c:	f507 6108 	add.w	r1, r7, #2176	@ 0x880
 8000b80:	f6a1 0178 	subw	r1, r1, #2168	@ 0x878
 8000b84:	600a      	str	r2, [r1, #0]
 8000b86:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8000b8a:	f6a2 027c 	subw	r2, r2, #2172	@ 0x87c
 8000b8e:	6013      	str	r3, [r2, #0]
	float y[NO_POINTS_ADC];
	int invOk;
	float th0,th1,th2;

	// Convert signal to float
	for(int i=0;i<NO_POINTS_ADC;i++){
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 8000b96:	e025      	b.n	8000be4 <ls_sine_calcSine+0x90>
		if(i>=nrPoints){
 8000b98:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8000b9c:	f6a3 0374 	subw	r3, r3, #2164	@ 0x874
 8000ba0:	f8d7 287c 	ldr.w	r2, [r7, #2172]	@ 0x87c
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	da22      	bge.n	8000bf0 <ls_sine_calcSine+0x9c>
			break;
		}
		y[i] = (float) signal[i];
 8000baa:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8000bb4:	f6a2 026c 	subw	r2, r2, #2156	@ 0x86c
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc6:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8000bca:	f6a3 0268 	subw	r2, r3, #2152	@ 0x868
 8000bce:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<NO_POINTS_ADC;i++){
 8000bda:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 8000bde:	3301      	adds	r3, #1
 8000be0:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 8000be4:	f8d7 387c 	ldr.w	r3, [r7, #2172]	@ 0x87c
 8000be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bec:	dbd4      	blt.n	8000b98 <ls_sine_calcSine+0x44>
 8000bee:	e000      	b.n	8000bf2 <ls_sine_calcSine+0x9e>
			break;
 8000bf0:	bf00      	nop
	}

	// Create matrices
	ls_sine_create_matrices(MtM,  MtY, dw, y, nrPoints);
 8000bf2:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8000bf6:	f6a3 0374 	subw	r3, r3, #2164	@ 0x874
 8000bfa:	f107 0218 	add.w	r2, r7, #24
 8000bfe:	f507 6108 	add.w	r1, r7, #2176	@ 0x880
 8000c02:	f5a1 6107 	sub.w	r1, r1, #2160	@ 0x870
 8000c06:	f607 0418 	addw	r4, r7, #2072	@ 0x818
 8000c0a:	f607 0048 	addw	r0, r7, #2120	@ 0x848
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	ed91 0a00 	vldr	s0, [r1]
 8000c14:	4621      	mov	r1, r4
 8000c16:	f000 f8cb 	bl	8000db0 <ls_sine_create_matrices>

	// Invert M.t@M
	invOk = ls_sine_inv_matrix(MtM, MtM_inv);
 8000c1a:	f607 0224 	addw	r2, r7, #2084	@ 0x824
 8000c1e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f9bd 	bl	8000fa4 <ls_sine_inv_matrix>
 8000c2a:	f8c7 0878 	str.w	r0, [r7, #2168]	@ 0x878

	if(invOk){
 8000c2e:	f8d7 3878 	ldr.w	r3, [r7, #2168]	@ 0x878
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80a7 	beq.w	8000d86 <ls_sine_calcSine+0x232>
		// Compute (M.T@M)^-1 @ M.T@Y
		th0 = MtM_inv[0][0]*MtY[0] + MtM_inv[0][1]*MtY[1] +  MtM_inv[0][2]*MtY[2];
 8000c38:	f607 0324 	addw	r3, r7, #2084	@ 0x824
 8000c3c:	ed93 7a00 	vldr	s14, [r3]
 8000c40:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c4c:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8000c50:	edd3 6a00 	vldr	s13, [r3]
 8000c54:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8000c58:	edd3 7a00 	vldr	s15, [r3]
 8000c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c64:	f607 032c 	addw	r3, r7, #2092	@ 0x82c
 8000c68:	edd3 6a00 	vldr	s13, [r3]
 8000c6c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	f607 0374 	addw	r3, r7, #2164	@ 0x874
 8000c80:	edc3 7a00 	vstr	s15, [r3]
		th1 = MtM_inv[1][0]*MtY[0] + MtM_inv[1][1]*MtY[1] +  MtM_inv[1][2]*MtY[2];
 8000c84:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8000c88:	ed93 7a00 	vldr	s14, [r3]
 8000c8c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c90:	edd3 7a00 	vldr	s15, [r3]
 8000c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c98:	f607 0334 	addw	r3, r7, #2100	@ 0x834
 8000c9c:	edd3 6a00 	vldr	s13, [r3]
 8000ca0:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cb0:	f607 0338 	addw	r3, r7, #2104	@ 0x838
 8000cb4:	edd3 6a00 	vldr	s13, [r3]
 8000cb8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc8:	f507 6307 	add.w	r3, r7, #2160	@ 0x870
 8000ccc:	edc3 7a00 	vstr	s15, [r3]
		th2 = MtM_inv[2][0]*MtY[0] + MtM_inv[2][1]*MtY[1] +  MtM_inv[2][2]*MtY[2];
 8000cd0:	f607 033c 	addw	r3, r7, #2108	@ 0x83c
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000cdc:	edd3 7a00 	vldr	s15, [r3]
 8000ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce4:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 8000ce8:	edd3 6a00 	vldr	s13, [r3]
 8000cec:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cfc:	f607 0344 	addw	r3, r7, #2116	@ 0x844
 8000d00:	edd3 6a00 	vldr	s13, [r3]
 8000d04:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d14:	f607 036c 	addw	r3, r7, #2156	@ 0x86c
 8000d18:	edc3 7a00 	vstr	s15, [r3]

		*amp = sqrtf(th0*th0 + th1*th1);
 8000d1c:	f607 0374 	addw	r3, r7, #2164	@ 0x874
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d28:	f507 6307 	add.w	r3, r7, #2160	@ 0x870
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	f006 fb04 	bl	8007348 <sqrtf>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8000d48:	f6a3 0378 	subw	r3, r3, #2168	@ 0x878
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
		*phase = atan2f(th1, th0);
 8000d52:	f607 0374 	addw	r3, r7, #2164	@ 0x874
 8000d56:	edd3 0a00 	vldr	s1, [r3]
 8000d5a:	f507 6307 	add.w	r3, r7, #2160	@ 0x870
 8000d5e:	ed93 0a00 	vldr	s0, [r3]
 8000d62:	f006 faef 	bl	8007344 <atan2f>
 8000d66:	eef0 7a40 	vmov.f32	s15, s0
 8000d6a:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8000d6e:	f6a3 037c 	subw	r3, r3, #2172	@ 0x87c
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	edc3 7a00 	vstr	s15, [r3]
		*offset = th2;
 8000d78:	f8d7 3890 	ldr.w	r3, [r7, #2192]	@ 0x890
 8000d7c:	f607 026c 	addw	r2, r7, #2156	@ 0x86c
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	601a      	str	r2, [r3, #0]
		amp = -1;
		phase = 0;
		offset = 0;
	}

}
 8000d84:	e00f      	b.n	8000da6 <ls_sine_calcSine+0x252>
		amp = -1;
 8000d86:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8000d8a:	f6a3 0378 	subw	r3, r3, #2168	@ 0x878
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d92:	601a      	str	r2, [r3, #0]
		phase = 0;
 8000d94:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8000d98:	f6a3 037c 	subw	r3, r3, #2172	@ 0x87c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
		offset = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 3890 	str.w	r3, [r7, #2192]	@ 0x890
}
 8000da6:	bf00      	nop
 8000da8:	f607 0784 	addw	r7, r7, #2180	@ 0x884
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd90      	pop	{r4, r7, pc}

08000db0 <ls_sine_create_matrices>:
               [sin(dw*3), cos(dw*2), 1],
               ...]

*/

void ls_sine_create_matrices(float MtM[3][3], float MtY[3], float dw, float* y, int nrPoints){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	ed2d 8b02 	vpush	{d8}
 8000db6:	b092      	sub	sp, #72	@ 0x48
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6178      	str	r0, [r7, #20]
 8000dbc:	6139      	str	r1, [r7, #16]
 8000dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dc2:	60ba      	str	r2, [r7, #8]
 8000dc4:	607b      	str	r3, [r7, #4]

    float m11 = 0;
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	647b      	str	r3, [r7, #68]	@ 0x44
    float m12 = 0;
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	643b      	str	r3, [r7, #64]	@ 0x40
    float m13 = 0;
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    float m22 = 0;
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
    float m23 = 0 ;
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
    float m33 = nrPoints;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dee:	edc7 7a08 	vstr	s15, [r7, #32]

    float MtY1 = 0;
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
    float MtY2 = 0;
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float MtY3 = 0;
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28

    for(int i=0;i<nrPoints;i++){
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e08:	e095      	b.n	8000f36 <ls_sine_create_matrices+0x186>

        float ti = dw*i;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e14:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1c:	edc7 7a07 	vstr	s15, [r7, #28]

        m11 += sinf(ti)*sinf(ti);
 8000e20:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e24:	f006 faf2 	bl	800740c <sinf>
 8000e28:	eeb0 8a40 	vmov.f32	s16, s0
 8000e2c:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e30:	f006 faec 	bl	800740c <sinf>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e3c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e44:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        m12 += sinf(ti)*cosf(ti);
 8000e48:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e4c:	f006 fade 	bl	800740c <sinf>
 8000e50:	eeb0 8a40 	vmov.f32	s16, s0
 8000e54:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e58:	f006 fa94 	bl	8007384 <cosf>
 8000e5c:	eef0 7a40 	vmov.f32	s15, s0
 8000e60:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e64:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        m13 += sinf(ti);
 8000e70:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e74:	f006 faca 	bl	800740c <sinf>
 8000e78:	eeb0 7a40 	vmov.f32	s14, s0
 8000e7c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e84:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        m22 += cosf(ti)*cosf(ti);
 8000e88:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e8c:	f006 fa7a 	bl	8007384 <cosf>
 8000e90:	eeb0 8a40 	vmov.f32	s16, s0
 8000e94:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e98:	f006 fa74 	bl	8007384 <cosf>
 8000e9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ea0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000ea4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eac:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        m23 += cosf(ti);
 8000eb0:	ed97 0a07 	vldr	s0, [r7, #28]
 8000eb4:	f006 fa66 	bl	8007384 <cosf>
 8000eb8:	eeb0 7a40 	vmov.f32	s14, s0
 8000ebc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ec4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

        MtY1 += sinf(ti)*y[i];
 8000ec8:	ed97 0a07 	vldr	s0, [r7, #28]
 8000ecc:	f006 fa9e 	bl	800740c <sinf>
 8000ed0:	eeb0 7a40 	vmov.f32	s14, s0
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	4413      	add	r3, r2
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eec:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        MtY2 += cosf(ti)*y[i];
 8000ef0:	ed97 0a07 	vldr	s0, [r7, #28]
 8000ef4:	f006 fa46 	bl	8007384 <cosf>
 8000ef8:	eeb0 7a40 	vmov.f32	s14, s0
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        MtY3 += y[i];
 8000f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	4413      	add	r3, r2
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    for(int i=0;i<nrPoints;i++){
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	3301      	adds	r3, #1
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	f6ff af65 	blt.w	8000e0a <ls_sine_create_matrices+0x5a>

    }

    MtM[0][0] = m11;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f44:	601a      	str	r2, [r3, #0]
    MtM[0][1] = m12;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f4a:	605a      	str	r2, [r3, #4]
    MtM[0][2] = m13;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f50:	609a      	str	r2, [r3, #8]

    MtM[1][0] = m12;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	330c      	adds	r3, #12
 8000f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f58:	601a      	str	r2, [r3, #0]
    MtM[1][1] = m22;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	330c      	adds	r3, #12
 8000f5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f60:	605a      	str	r2, [r3, #4]
    MtM[1][2] = m23;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	330c      	adds	r3, #12
 8000f66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f68:	609a      	str	r2, [r3, #8]

    MtM[2][0] = m13;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f70:	601a      	str	r2, [r3, #0]
    MtM[2][1] = m12;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3318      	adds	r3, #24
 8000f76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f78:	605a      	str	r2, [r3, #4]
    MtM[2][2] = m33;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	6a3a      	ldr	r2, [r7, #32]
 8000f80:	609a      	str	r2, [r3, #8]

    MtY[0] = MtY1;
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f86:	601a      	str	r2, [r3, #0]
    MtY[1] = MtY2;
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f8e:	601a      	str	r2, [r3, #0]
    MtY[2] = MtY3;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	3308      	adds	r3, #8
 8000f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	3748      	adds	r7, #72	@ 0x48
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	ecbd 8b02 	vpop	{d8}
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <ls_sine_inv_matrix>:

/* Computes the inverse of a 3x3 matrix
    If no inverse exits, it returns zero.
    If an inverse exits, it returns one.
*/
int ls_sine_inv_matrix(float Mat[3][3], float MatInv[3][3]){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]

    float det = Mat[0][0] * (Mat[1][1] * Mat[2][2] - Mat[2][1] * Mat[1][2]) -
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	ed93 7a00 	vldr	s14, [r3]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	330c      	adds	r3, #12
 8000fb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3318      	adds	r3, #24
 8000fc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3318      	adds	r3, #24
 8000fcc:	ed93 6a01 	vldr	s12, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	330c      	adds	r3, #12
 8000fd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
                Mat[0][1] * (Mat[1][0] * Mat[2][2] - Mat[1][2] * Mat[2][0]) +
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	330c      	adds	r3, #12
 8000fee:	ed93 6a00 	vldr	s12, [r3]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ffa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	330c      	adds	r3, #12
 8001002:	edd3 5a02 	vldr	s11, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3318      	adds	r3, #24
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001012:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001016:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float det = Mat[0][0] * (Mat[1][1] * Mat[2][2] - Mat[2][1] * Mat[1][2]) -
 800101a:	ee37 7a67 	vsub.f32	s14, s14, s15
                Mat[0][2] * (Mat[1][0] * Mat[2][1] - Mat[1][1] * Mat[2][0]);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edd3 6a02 	vldr	s13, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	330c      	adds	r3, #12
 8001028:	ed93 6a00 	vldr	s12, [r3]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3318      	adds	r3, #24
 8001030:	edd3 7a01 	vldr	s15, [r3, #4]
 8001034:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	330c      	adds	r3, #12
 800103c:	edd3 5a01 	vldr	s11, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3318      	adds	r3, #24
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800104c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float det = Mat[0][0] * (Mat[1][1] * Mat[2][2] - Mat[2][1] * Mat[1][2]) -
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	edc7 7a03 	vstr	s15, [r7, #12]

    if (abs(det)<0.0001){
 800105c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001064:	ee17 3a90 	vmov	r3, s15
 8001068:	2b00      	cmp	r3, #0
 800106a:	db09      	blt.n	8001080 <ls_sine_inv_matrix+0xdc>
 800106c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001074:	ee17 3a90 	vmov	r3, s15
 8001078:	2b00      	cmp	r3, #0
 800107a:	dc01      	bgt.n	8001080 <ls_sine_inv_matrix+0xdc>
        return 0;
 800107c:	2300      	movs	r3, #0
 800107e:	e107      	b.n	8001290 <ls_sine_inv_matrix+0x2ec>
    }

    float invdet = 1 / det;
 8001080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001084:	ed97 7a03 	vldr	s14, [r7, #12]
 8001088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108c:	edc7 7a02 	vstr	s15, [r7, #8]

    MatInv[0][0] = (Mat[1][1] * Mat[2][2] - Mat[2][1] * Mat[1][2]) * invdet;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	330c      	adds	r3, #12
 8001094:	ed93 7a01 	vldr	s14, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3318      	adds	r3, #24
 800109c:	edd3 7a02 	vldr	s15, [r3, #8]
 80010a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3318      	adds	r3, #24
 80010a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	330c      	adds	r3, #12
 80010b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80010b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	edc3 7a00 	vstr	s15, [r3]
    MatInv[0][1] = (Mat[0][2] * Mat[2][1] - Mat[0][1] * Mat[2][2]) * invdet;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3318      	adds	r3, #24
 80010d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80010d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	edd3 6a01 	vldr	s13, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3318      	adds	r3, #24
 80010e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	edc3 7a01 	vstr	s15, [r3, #4]
    MatInv[0][2] = (Mat[0][1] * Mat[1][2] - Mat[0][2] * Mat[1][1]) * invdet;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	ed93 7a01 	vldr	s14, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	330c      	adds	r3, #12
 800110a:	edd3 7a02 	vldr	s15, [r3, #8]
 800110e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edd3 6a02 	vldr	s13, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	330c      	adds	r3, #12
 800111c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001128:	edd7 7a02 	vldr	s15, [r7, #8]
 800112c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	edc3 7a02 	vstr	s15, [r3, #8]
    MatInv[1][0] = (Mat[1][2] * Mat[2][0] - Mat[1][0] * Mat[2][2]) * invdet;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	330c      	adds	r3, #12
 800113a:	ed93 7a02 	vldr	s14, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3318      	adds	r3, #24
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	330c      	adds	r3, #12
 800114e:	edd3 6a00 	vldr	s13, [r3]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3318      	adds	r3, #24
 8001156:	edd3 7a02 	vldr	s15, [r3, #8]
 800115a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	330c      	adds	r3, #12
 8001166:	edd7 7a02 	vldr	s15, [r7, #8]
 800116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116e:	edc3 7a00 	vstr	s15, [r3]
    MatInv[1][1] = (Mat[0][0] * Mat[2][2] - Mat[0][2] * Mat[2][0]) * invdet;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	ed93 7a00 	vldr	s14, [r3]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3318      	adds	r3, #24
 800117c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edd3 6a02 	vldr	s13, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3318      	adds	r3, #24
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001196:	ee37 7a67 	vsub.f32	s14, s14, s15
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	330c      	adds	r3, #12
 800119e:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	edc3 7a01 	vstr	s15, [r3, #4]
    MatInv[1][2] = (Mat[1][0] * Mat[0][2] - Mat[0][0] * Mat[1][2]) * invdet;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	330c      	adds	r3, #12
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edd3 6a00 	vldr	s13, [r3]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	330c      	adds	r3, #12
 80011c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	330c      	adds	r3, #12
 80011d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	edc3 7a02 	vstr	s15, [r3, #8]
    MatInv[2][0] = (Mat[1][0] * Mat[2][1] - Mat[2][0] * Mat[1][1]) * invdet;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	330c      	adds	r3, #12
 80011e6:	ed93 7a00 	vldr	s14, [r3]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3318      	adds	r3, #24
 80011ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3318      	adds	r3, #24
 80011fa:	edd3 6a00 	vldr	s13, [r3]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	330c      	adds	r3, #12
 8001202:	edd3 7a01 	vldr	s15, [r3, #4]
 8001206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3318      	adds	r3, #24
 8001212:	edd7 7a02 	vldr	s15, [r7, #8]
 8001216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121a:	edc3 7a00 	vstr	s15, [r3]
    MatInv[2][1] = (Mat[2][0] * Mat[0][1] - Mat[0][0] * Mat[2][1]) * invdet;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3318      	adds	r3, #24
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edd3 7a01 	vldr	s15, [r3, #4]
 800122c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	edd3 6a00 	vldr	s13, [r3]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3318      	adds	r3, #24
 800123a:	edd3 7a01 	vldr	s15, [r3, #4]
 800123e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001242:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3318      	adds	r3, #24
 800124a:	edd7 7a02 	vldr	s15, [r7, #8]
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	edc3 7a01 	vstr	s15, [r3, #4]
    MatInv[2][2] = (Mat[0][0] * Mat[1][1] - Mat[1][0] * Mat[0][1]) * invdet;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	ed93 7a00 	vldr	s14, [r3]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	330c      	adds	r3, #12
 8001260:	edd3 7a01 	vldr	s15, [r3, #4]
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	330c      	adds	r3, #12
 800126c:	edd3 6a00 	vldr	s13, [r3]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edd3 7a01 	vldr	s15, [r3, #4]
 8001276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3318      	adds	r3, #24
 8001282:	edd7 7a02 	vldr	s15, [r7, #8]
 8001286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128a:	edc3 7a02 	vstr	s15, [r3, #8]

    return 1;
 800128e:	2301      	movs	r3, #1

}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	0000      	movs	r0, r0
	...

080012a0 <createSinewave>:
uint16_t adcDataUart[NO_POINTS_ADC];
uint16_t adcDataUart2[NO_POINTS_ADC];



void createSinewave(uint32_t * sendData, float amp, float phase, float dw, int noPoints){
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	ed2d 8b02 	vpush	{d8}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6178      	str	r0, [r7, #20]
 80012ac:	ed87 0a04 	vstr	s0, [r7, #16]
 80012b0:	edc7 0a03 	vstr	s1, [r7, #12]
 80012b4:	ed87 1a02 	vstr	s2, [r7, #8]
 80012b8:	6079      	str	r1, [r7, #4]

	float gain = amp* 0.5 * 0xFFF; // 12-bit DAC
 80012ba:	6938      	ldr	r0, [r7, #16]
 80012bc:	f7ff f8e8 	bl	8000490 <__aeabi_f2d>
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <createSinewave+0x120>)
 80012c6:	f7ff f93b 	bl	8000540 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	a337      	add	r3, pc, #220	@ (adr r3, 80013b0 <createSinewave+0x110>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f932 	bl	8000540 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fbe6 	bl	8000ab4 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	623b      	str	r3, [r7, #32]
	uint32_t offset = 0xFFF * 0.48;
 80012ec:	f240 73ad 	movw	r3, #1965	@ 0x7ad
 80012f0:	61fb      	str	r3, [r7, #28]

	for(int i=0; i<noPoints; i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f6:	e04d      	b.n	8001394 <createSinewave+0xf4>
		sendData[i] = (uint32_t) gain*sinf(i*dw + phase/180.0 * M_PI) + offset;
 80012f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001300:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001316:	ee17 0a90 	vmov	r0, s15
 800131a:	f7ff f8b9 	bl	8000490 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff f8b4 	bl	8000490 <__aeabi_f2d>
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <createSinewave+0x124>)
 800132e:	f7ff fa31 	bl	8000794 <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a31f      	add	r3, pc, #124	@ (adr r3, 80013b8 <createSinewave+0x118>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f8fe 	bl	8000540 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4620      	mov	r0, r4
 800134a:	4629      	mov	r1, r5
 800134c:	f7fe ff42 	bl	80001d4 <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fbac 	bl	8000ab4 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	ee00 3a10 	vmov	s0, r3
 8001362:	f006 f853 	bl	800740c <sinf>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
 800136a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4413      	add	r3, r2
 8001384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001388:	ee17 2a90 	vmov	r2, s15
 800138c:	601a      	str	r2, [r3, #0]
	for(int i=0; i<noPoints; i++){
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	3301      	adds	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
 8001394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbad      	blt.n	80012f8 <createSinewave+0x58>
	}

}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	ecbd 8b02 	vpop	{d8}
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40affe00 	.word	0x40affe00
 80013b8:	54442d18 	.word	0x54442d18
 80013bc:	400921fb 	.word	0x400921fb
 80013c0:	3fe00000 	.word	0x3fe00000
 80013c4:	40668000 	.word	0x40668000

080013c8 <uart_send_int>:

void uart_send_int(uint32_t i){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint32_t sendInt = i;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &sendInt, 4, UART_TIMEOUT);
 80013d4:	f107 010c 	add.w	r1, r7, #12
 80013d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80013dc:	2204      	movs	r2, #4
 80013de:	4803      	ldr	r0, [pc, #12]	@ (80013ec <uart_send_int+0x24>)
 80013e0:	f004 fd96 	bl	8005f10 <HAL_UART_Transmit>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000210 	.word	0x20000210

080013f0 <uartInterrupt>:

uint8_t uartRecBuff[7];
uint8_t uartSendBuff[7];
uint8_t cmd = 0;
void uartInterrupt(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
	float sinePars[3];
	cmd = uartRecBuff[0];
 80013f6:	4b37      	ldr	r3, [pc, #220]	@ (80014d4 <uartInterrupt+0xe4>)
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <uartInterrupt+0xe8>)
 80013fc:	701a      	strb	r2, [r3, #0]

	  if(cmd == 1){
 80013fe:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <uartInterrupt+0xe8>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d103      	bne.n	800140e <uartInterrupt+0x1e>
		  uart_send_int(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff ffde 	bl	80013c8 <uart_send_int>
 800140c:	e056      	b.n	80014bc <uartInterrupt+0xcc>

	  }else if(cmd == 2){
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <uartInterrupt+0xe8>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d10c      	bne.n	8001430 <uartInterrupt+0x40>
		  uart_send_int(sizeof(adcDataUart));
 8001416:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800141a:	f7ff ffd5 	bl	80013c8 <uart_send_int>
		  HAL_UART_Transmit(&huart2, (uint8_t*) adcDataUart, sizeof(adcData), UART_TIMEOUT);
 800141e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	492d      	ldr	r1, [pc, #180]	@ (80014dc <uartInterrupt+0xec>)
 8001428:	482d      	ldr	r0, [pc, #180]	@ (80014e0 <uartInterrupt+0xf0>)
 800142a:	f004 fd71 	bl	8005f10 <HAL_UART_Transmit>
 800142e:	e045      	b.n	80014bc <uartInterrupt+0xcc>
	  }
	  else if(cmd == 3){
 8001430:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <uartInterrupt+0xe8>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d10c      	bne.n	8001452 <uartInterrupt+0x62>
	  		  uart_send_int(sizeof(adcDataUart2));
 8001438:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800143c:	f7ff ffc4 	bl	80013c8 <uart_send_int>
	  		  HAL_UART_Transmit(&huart2, (uint8_t*) adcDataUart2, sizeof(adcData), UART_TIMEOUT);
 8001440:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001444:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001448:	4926      	ldr	r1, [pc, #152]	@ (80014e4 <uartInterrupt+0xf4>)
 800144a:	4825      	ldr	r0, [pc, #148]	@ (80014e0 <uartInterrupt+0xf0>)
 800144c:	f004 fd60 	bl	8005f10 <HAL_UART_Transmit>
 8001450:	e034      	b.n	80014bc <uartInterrupt+0xcc>
	  	  }
	  else if(cmd == 4){
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <uartInterrupt+0xe8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b04      	cmp	r3, #4
 8001458:	d113      	bne.n	8001482 <uartInterrupt+0x92>
		  	  sinePars[0] = amp;
 800145a:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <uartInterrupt+0xf8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	607b      	str	r3, [r7, #4]
		  	  sinePars[1] = phase;
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <uartInterrupt+0xfc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60bb      	str	r3, [r7, #8]
		  	  sinePars[2] = offset;
 8001466:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <uartInterrupt+0x100>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]
	  		  uart_send_int(sizeof(sinePars));
 800146c:	200c      	movs	r0, #12
 800146e:	f7ff ffab 	bl	80013c8 <uart_send_int>
	  		  HAL_UART_Transmit(&huart2, (uint8_t*) sinePars, sizeof(sinePars), UART_TIMEOUT);
 8001472:	1d39      	adds	r1, r7, #4
 8001474:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001478:	220c      	movs	r2, #12
 800147a:	4819      	ldr	r0, [pc, #100]	@ (80014e0 <uartInterrupt+0xf0>)
 800147c:	f004 fd48 	bl	8005f10 <HAL_UART_Transmit>
 8001480:	e01c      	b.n	80014bc <uartInterrupt+0xcc>
	  }else if(cmd == 5){
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <uartInterrupt+0xe8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d10a      	bne.n	80014a0 <uartInterrupt+0xb0>
  		  uart_send_int(sizeof(measValue));
 800148a:	2004      	movs	r0, #4
 800148c:	f7ff ff9c 	bl	80013c8 <uart_send_int>
  		  HAL_UART_Transmit(&huart2, (uint8_t*) &measValue, sizeof(measValue), UART_TIMEOUT);
 8001490:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001494:	2204      	movs	r2, #4
 8001496:	4917      	ldr	r1, [pc, #92]	@ (80014f4 <uartInterrupt+0x104>)
 8001498:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <uartInterrupt+0xf0>)
 800149a:	f004 fd39 	bl	8005f10 <HAL_UART_Transmit>
 800149e:	e00d      	b.n	80014bc <uartInterrupt+0xcc>
	  }else if(cmd == 6){
 80014a0:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <uartInterrupt+0xe8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d109      	bne.n	80014bc <uartInterrupt+0xcc>
  		  uart_send_int(sizeof(measValFiltered));
 80014a8:	2004      	movs	r0, #4
 80014aa:	f7ff ff8d 	bl	80013c8 <uart_send_int>
  		  HAL_UART_Transmit(&huart2, (uint8_t*) &measValFiltered, sizeof(measValFiltered), UART_TIMEOUT);
 80014ae:	f242 730f 	movw	r3, #9999	@ 0x270f
 80014b2:	2204      	movs	r2, #4
 80014b4:	4910      	ldr	r1, [pc, #64]	@ (80014f8 <uartInterrupt+0x108>)
 80014b6:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <uartInterrupt+0xf0>)
 80014b8:	f004 fd2a 	bl	8005f10 <HAL_UART_Transmit>
	  }


	  cmd = 0;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <uartInterrupt+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, &uartRecBuff, 1);
 80014c2:	2201      	movs	r2, #1
 80014c4:	4903      	ldr	r1, [pc, #12]	@ (80014d4 <uartInterrupt+0xe4>)
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <uartInterrupt+0xf0>)
 80014c8:	f004 fdab 	bl	8006022 <HAL_UART_Receive_IT>
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200010b0 	.word	0x200010b0
 80014d8:	200010b7 	.word	0x200010b7
 80014dc:	200008b0 	.word	0x200008b0
 80014e0:	20000210 	.word	0x20000210
 80014e4:	20000cb0 	.word	0x20000cb0
 80014e8:	20000298 	.word	0x20000298
 80014ec:	2000029c 	.word	0x2000029c
 80014f0:	200002a0 	.word	0x200002a0
 80014f4:	200002a4 	.word	0x200002a4
 80014f8:	200002a8 	.word	0x200002a8

080014fc <clearAdcData>:


void clearAdcData(){
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
	  for(int i=0;i<NO_POINTS_ADC;i++){
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e007      	b.n	8001518 <clearAdcData+0x1c>
		  adcData[i] = 0;
 8001508:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <clearAdcData+0x34>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2100      	movs	r1, #0
 800150e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i=0;i<NO_POINTS_ADC;i++){
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3301      	adds	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800151e:	dbf3      	blt.n	8001508 <clearAdcData+0xc>
	  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200004b0 	.word	0x200004b0
 8001534:	00000000 	.word	0x00000000

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f000 fe15 	bl	800216c <HAL_Init>
  /* USER CODE BEGIN Init */

  // 0.7 peak2peak = 4.3V
  // 0.8 peak2peak = 4.9V
  // 0.88 peak2peak = 5.4V
  float dw = 2*M_PI/NO_POINTS_DAC;
 8001542:	4bb5      	ldr	r3, [pc, #724]	@ (8001818 <main+0x2e0>)
 8001544:	60fb      	str	r3, [r7, #12]
  uint32_t idleDAC_value = (0xFFF)/2;
 8001546:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800154a:	60bb      	str	r3, [r7, #8]
  //0.88
  createSinewave(dacData, 0.8, 0.0, dw, NO_POINTS_DAC);
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	ed97 1a03 	vldr	s2, [r7, #12]
 8001552:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 800181c <main+0x2e4>
 8001556:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8001820 <main+0x2e8>
 800155a:	48b2      	ldr	r0, [pc, #712]	@ (8001824 <main+0x2ec>)
 800155c:	f7ff fea0 	bl	80012a0 <createSinewave>
  clearAdcData();
 8001560:	f7ff ffcc 	bl	80014fc <clearAdcData>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f986 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f000 fba0 	bl	8001cac <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f000 fb78 	bl	8001c60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001570:	f000 fb46 	bl	8001c00 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001574:	f000 fa4a 	bl	8001a0c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001578:	f000 fa9c 	bl	8001ab4 <MX_TIM2_Init>
  MX_DAC2_Init();
 800157c:	f000 fa70 	bl	8001a60 <MX_DAC2_Init>
  MX_ADC1_Init();
 8001580:	f000 f9d2 	bl	8001928 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001584:	f000 fae2 	bl	8001b4c <MX_TIM3_Init>
  //{
  //  Error_Handler();
  //}
  //HAL_UART_Transmit(&huart2, "started\n", 8, UART_TIMEOUT);

  HAL_DAC_Init(&hdac1);
 8001588:	48a7      	ldr	r0, [pc, #668]	@ (8001828 <main+0x2f0>)
 800158a:	f001 fefa 	bl	8003382 <HAL_DAC_Init>
  HAL_DAC_Init(&hdac2);
 800158e:	48a7      	ldr	r0, [pc, #668]	@ (800182c <main+0x2f4>)
 8001590:	f001 fef7 	bl	8003382 <HAL_DAC_Init>
  dac2Offset = 0xFFF/2;
 8001594:	4ba6      	ldr	r3, [pc, #664]	@ (8001830 <main+0x2f8>)
 8001596:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800159a:	601a      	str	r2, [r3, #0]
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac2Offset);
 800159c:	4ba4      	ldr	r3, [pc, #656]	@ (8001830 <main+0x2f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	48a1      	ldr	r0, [pc, #644]	@ (800182c <main+0x2f4>)
 80015a6:	f001 ff7d 	bl	80034a4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80015aa:	2100      	movs	r1, #0
 80015ac:	489f      	ldr	r0, [pc, #636]	@ (800182c <main+0x2f4>)
 80015ae:	f001 ff9e 	bl	80034ee <HAL_DAC_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dacData, NO_POINTS_DAC, DAC_ALIGN_12B_R);
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	4a9a      	ldr	r2, [pc, #616]	@ (8001824 <main+0x2ec>)
 80015ba:	2100      	movs	r1, #0
 80015bc:	489a      	ldr	r0, [pc, #616]	@ (8001828 <main+0x2f0>)
 80015be:	f001 ffe1 	bl	8003584 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, NO_POINTS_ADC);
 80015c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c6:	499b      	ldr	r1, [pc, #620]	@ (8001834 <main+0x2fc>)
 80015c8:	489b      	ldr	r0, [pc, #620]	@ (8001838 <main+0x300>)
 80015ca:	f001 f809 	bl	80025e0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart2, &uartRecBuff, 1);
 80015ce:	2201      	movs	r2, #1
 80015d0:	499a      	ldr	r1, [pc, #616]	@ (800183c <main+0x304>)
 80015d2:	489b      	ldr	r0, [pc, #620]	@ (8001840 <main+0x308>)
 80015d4:	f004 fd25 	bl	8006022 <HAL_UART_Receive_IT>


  while (1)
  {

	  clearAdcData();
 80015d8:	f7ff ff90 	bl	80014fc <clearAdcData>
	  HAL_NVIC_DisableIRQ(USART2_IRQn);
 80015dc:	2026      	movs	r0, #38	@ 0x26
 80015de:	f001 feb6 	bl	800334e <HAL_NVIC_DisableIRQ>
	  // Start exication and sensing

	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dacData, NO_POINTS_DAC, DAC_ALIGN_12B_R);
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001824 <main+0x2ec>)
 80015ea:	2100      	movs	r1, #0
 80015ec:	488e      	ldr	r0, [pc, #568]	@ (8001828 <main+0x2f0>)
 80015ee:	f001 ffc9 	bl	8003584 <HAL_DAC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, NO_POINTS_ADC);
 80015f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f6:	498f      	ldr	r1, [pc, #572]	@ (8001834 <main+0x2fc>)
 80015f8:	488f      	ldr	r0, [pc, #572]	@ (8001838 <main+0x300>)
 80015fa:	f000 fff1 	bl	80025e0 <HAL_ADC_Start_DMA>
	  HAL_TIM_Base_Start(&htim3);
 80015fe:	4891      	ldr	r0, [pc, #580]	@ (8001844 <main+0x30c>)
 8001600:	f004 f892 	bl	8005728 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start(&htim2);
 8001604:	4890      	ldr	r0, [pc, #576]	@ (8001848 <main+0x310>)
 8001606:	f004 f88f 	bl	8005728 <HAL_TIM_Base_Start>

	  HAL_Delay(10);
 800160a:	200a      	movs	r0, #10
 800160c:	f000 fe14 	bl	8002238 <HAL_Delay>

	  HAL_TIM_Base_Stop(&htim2);
 8001610:	488d      	ldr	r0, [pc, #564]	@ (8001848 <main+0x310>)
 8001612:	f004 f8dd 	bl	80057d0 <HAL_TIM_Base_Stop>
	  HAL_TIM_Base_Stop(&htim3);
 8001616:	488b      	ldr	r0, [pc, #556]	@ (8001844 <main+0x30c>)
 8001618:	f004 f8da 	bl	80057d0 <HAL_TIM_Base_Stop>
	  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800161c:	2100      	movs	r1, #0
 800161e:	4882      	ldr	r0, [pc, #520]	@ (8001828 <main+0x2f0>)
 8001620:	f001 fed1 	bl	80033c6 <HAL_DAC_Stop_DMA>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, idleDAC_value);
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	487f      	ldr	r0, [pc, #508]	@ (8001828 <main+0x2f0>)
 800162c:	f001 ff3a 	bl	80034a4 <HAL_DAC_SetValue>
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001630:	2100      	movs	r1, #0
 8001632:	487d      	ldr	r0, [pc, #500]	@ (8001828 <main+0x2f0>)
 8001634:	f001 ff5b 	bl	80034ee <HAL_DAC_Start>


	  //memcpy(adcDataUart, adcData, sizeof(adcData));
	  for(int i=0;i<NO_POINTS_ADC - SKIP_TRANSIENT;i++){
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00b      	b.n	8001656 <main+0x11e>
		  adcDataUart[i] = adcData[i + SKIP_TRANSIENT];
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	330f      	adds	r3, #15
 8001642:	4a7c      	ldr	r2, [pc, #496]	@ (8001834 <main+0x2fc>)
 8001644:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001648:	4a80      	ldr	r2, [pc, #512]	@ (800184c <main+0x314>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i=0;i<NO_POINTS_ADC - SKIP_TRANSIENT;i++){
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 800165c:	ddef      	ble.n	800163e <main+0x106>
	  }

	  ls_sine_calcSine(adcData + SKIP_TRANSIENT, dw*ADC_DAC_RATIO, NO_POINTS_ADC - 1.5*SKIP_TRANSIENT, &amp, &phase, &offset);
 800165e:	487c      	ldr	r0, [pc, #496]	@ (8001850 <main+0x318>)
 8001660:	edd7 7a03 	vldr	s15, [r7, #12]
 8001664:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166c:	4b79      	ldr	r3, [pc, #484]	@ (8001854 <main+0x31c>)
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4b79      	ldr	r3, [pc, #484]	@ (8001858 <main+0x320>)
 8001672:	4a7a      	ldr	r2, [pc, #488]	@ (800185c <main+0x324>)
 8001674:	f240 11e9 	movw	r1, #489	@ 0x1e9
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	f7ff fa6a 	bl	8000b54 <ls_sine_calcSine>

	  measValue = amp;
 8001680:	4b76      	ldr	r3, [pc, #472]	@ (800185c <main+0x324>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a76      	ldr	r2, [pc, #472]	@ (8001860 <main+0x328>)
 8001686:	6013      	str	r3, [r2, #0]
	  if((phase > 150*3.14/180.0) || (phase < -30*3.14/180.0)){
 8001688:	4b73      	ldr	r3, [pc, #460]	@ (8001858 <main+0x320>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe feff 	bl	8000490 <__aeabi_f2d>
 8001692:	a35b      	add	r3, pc, #364	@ (adr r3, 8001800 <main+0x2c8>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f9e2 	bl	8000a60 <__aeabi_dcmpgt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <main+0x184>
 80016a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001858 <main+0x320>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fef2 	bl	8000490 <__aeabi_f2d>
 80016ac:	a356      	add	r3, pc, #344	@ (adr r3, 8001808 <main+0x2d0>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7ff f9b7 	bl	8000a24 <__aeabi_dcmplt>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <main+0x194>
		  measValue = measValue*-1;
 80016bc:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <main+0x328>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eef1 7a67 	vneg.f32	s15, s15
 80016c6:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <main+0x328>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
	  }

	  measValFiltered = PT1_ALPHA*measValFiltered + (1-PT1_ALPHA)*measValue;
 80016cc:	4b65      	ldr	r3, [pc, #404]	@ (8001864 <main+0x32c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fedd 	bl	8000490 <__aeabi_f2d>
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b63      	ldr	r3, [pc, #396]	@ (8001868 <main+0x330>)
 80016dc:	f7fe ff30 	bl	8000540 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4614      	mov	r4, r2
 80016e6:	461d      	mov	r5, r3
 80016e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001860 <main+0x328>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fecf 	bl	8000490 <__aeabi_f2d>
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <main+0x330>)
 80016f8:	f7fe ff22 	bl	8000540 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7fe fd66 	bl	80001d4 <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f9d0 	bl	8000ab4 <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4a53      	ldr	r2, [pc, #332]	@ (8001864 <main+0x32c>)
 8001718:	6013      	str	r3, [r2, #0]

	  for(int i=0;i< NO_POINTS_ADC;i++){
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e02d      	b.n	800177c <main+0x244>
		  adcDataUart2[i] = (uint16_t) (amp * sinf(i*dw*ADC_DAC_RATIO + phase) + offset);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172a:	edd7 7a03 	vldr	s15, [r7, #12]
 800172e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001732:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001736:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <main+0x320>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	f005 fe60 	bl	800740c <sinf>
 800174c:	eeb0 7a40 	vmov.f32	s14, s0
 8001750:	4b42      	ldr	r3, [pc, #264]	@ (800185c <main+0x324>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <main+0x31c>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001768:	ee17 3a90 	vmov	r3, s15
 800176c:	b299      	uxth	r1, r3
 800176e:	4a3f      	ldr	r2, [pc, #252]	@ (800186c <main+0x334>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i=0;i< NO_POINTS_ADC;i++){
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3301      	adds	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001782:	dbcd      	blt.n	8001720 <main+0x1e8>
	  }

	  // Adjust offset
	  uint32_t error = 2000 - offset;
 8001784:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <main+0x31c>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001870 <main+0x338>
 800178e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001796:	ee17 3a90 	vmov	r3, s15
 800179a:	607b      	str	r3, [r7, #4]
	  dac2Offset += error*0.01;
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <main+0x2f8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe53 	bl	800044c <__aeabi_ui2d>
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7fe fe4e 	bl	800044c <__aeabi_ui2d>
 80017b0:	a317      	add	r3, pc, #92	@ (adr r3, 8001810 <main+0x2d8>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe fec3 	bl	8000540 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4620      	mov	r0, r4
 80017c0:	4629      	mov	r1, r5
 80017c2:	f7fe fd07 	bl	80001d4 <__adddf3>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f951 	bl	8000a74 <__aeabi_d2uiz>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <main+0x2f8>)
 80017d6:	6013      	str	r3, [r2, #0]

	  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac2Offset);
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <main+0x2f8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	4812      	ldr	r0, [pc, #72]	@ (800182c <main+0x2f4>)
 80017e2:	f001 fe5f 	bl	80034a4 <HAL_DAC_SetValue>
	  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80017e6:	2100      	movs	r1, #0
 80017e8:	4810      	ldr	r0, [pc, #64]	@ (800182c <main+0x2f4>)
 80017ea:	f001 fe80 	bl	80034ee <HAL_DAC_Start>

	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ee:	2026      	movs	r0, #38	@ 0x26
 80017f0:	f001 fd9f 	bl	8003332 <HAL_NVIC_EnableIRQ>
	  HAL_Delay(10);
 80017f4:	200a      	movs	r0, #10
 80017f6:	f000 fd1f 	bl	8002238 <HAL_Delay>
  {
 80017fa:	e6ed      	b.n	80015d8 <main+0xa0>
 80017fc:	f3af 8000 	nop.w
 8001800:	eeeeeeef 	.word	0xeeeeeeef
 8001804:	4004eeee 	.word	0x4004eeee
 8001808:	8bf258bf 	.word	0x8bf258bf
 800180c:	bfe0bf25 	.word	0xbfe0bf25
 8001810:	47ae147b 	.word	0x47ae147b
 8001814:	3f847ae1 	.word	0x3f847ae1
 8001818:	3d490fdb 	.word	0x3d490fdb
 800181c:	00000000 	.word	0x00000000
 8001820:	3f4ccccd 	.word	0x3f4ccccd
 8001824:	200002b0 	.word	0x200002b0
 8001828:	2000010c 	.word	0x2000010c
 800182c:	20000120 	.word	0x20000120
 8001830:	200002ac 	.word	0x200002ac
 8001834:	200004b0 	.word	0x200004b0
 8001838:	20000078 	.word	0x20000078
 800183c:	200010b0 	.word	0x200010b0
 8001840:	20000210 	.word	0x20000210
 8001844:	200001c4 	.word	0x200001c4
 8001848:	20000178 	.word	0x20000178
 800184c:	200008b0 	.word	0x200008b0
 8001850:	200004ce 	.word	0x200004ce
 8001854:	200002a0 	.word	0x200002a0
 8001858:	2000029c 	.word	0x2000029c
 800185c:	20000298 	.word	0x20000298
 8001860:	200002a4 	.word	0x200002a4
 8001864:	200002a8 	.word	0x200002a8
 8001868:	3fe00000 	.word	0x3fe00000
 800186c:	20000cb0 	.word	0x20000cb0
 8001870:	44fa0000 	.word	0x44fa0000

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b096      	sub	sp, #88	@ 0x58
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800187e:	2228      	movs	r2, #40	@ 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f005 fd2c 	bl	80072e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	2302      	movs	r3, #2
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b0:	2310      	movs	r3, #16
 80018b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018bc:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80018c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fb90 	bl	8003fec <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018d2:	f000 fa0f 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2302      	movs	r3, #2
 80018dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fb88 	bl	8005008 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018fe:	f000 f9f9 	bl	8001cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001906:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800190a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fd8e 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800191a:	f000 f9eb 	bl	8001cf4 <Error_Handler>
  }
}
 800191e:	bf00      	nop
 8001920:	3758      	adds	r7, #88	@ 0x58
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800194a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 800194c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001950:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001964:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 8001966:	2200      	movs	r2, #0
 8001968:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800196a:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001972:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 8001974:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001978:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800197a:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 800197c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001980:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001982:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001988:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 800198a:	2201      	movs	r2, #1
 800198c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 8001998:	2204      	movs	r2, #4
 800199a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80019a2:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a8:	4817      	ldr	r0, [pc, #92]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 80019aa:	f000 fc87 	bl	80022bc <HAL_ADC_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019b4:	f000 f99e 	bl	8001cf4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 80019c4:	f001 f9a4 	bl	8002d10 <HAL_ADCEx_MultiModeConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80019ce:	f000 f991 	bl	8001cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <MX_ADC1_Init+0xe0>)
 80019f0:	f000 fed0 	bl	8002794 <HAL_ADC_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80019fa:	f000 f97b 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000078 	.word	0x20000078

08001a0c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <MX_DAC1_Init+0x4c>)
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <MX_DAC1_Init+0x50>)
 8001a20:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001a22:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <MX_DAC1_Init+0x4c>)
 8001a24:	f001 fcad 	bl	8003382 <HAL_DAC_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001a2e:	f000 f961 	bl	8001cf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001a32:	2324      	movs	r3, #36	@ 0x24
 8001a34:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_DAC1_Init+0x4c>)
 8001a42:	f001 fe5b 	bl	80036fc <HAL_DAC_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001a4c:	f000 f952 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000010c 	.word	0x2000010c
 8001a5c:	40007400 	.word	0x40007400

08001a60 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <MX_DAC2_Init+0x4c>)
 8001a72:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab0 <MX_DAC2_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_DAC2_Init+0x4c>)
 8001a78:	f001 fc83 	bl	8003382 <HAL_DAC_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8001a82:	f000 f937 	bl	8001cf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001a86:	233c      	movs	r3, #60	@ 0x3c
 8001a88:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_DAC2_Init+0x4c>)
 8001a96:	f001 fe31 	bl	80036fc <HAL_DAC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8001aa0:	f000 f928 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000120 	.word	0x20000120
 8001ab0:	40009800 	.word	0x40009800

08001ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001ad4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ad8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001ae8:	2218      	movs	r2, #24
 8001aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001af4:	2280      	movs	r2, #128	@ 0x80
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af8:	4813      	ldr	r0, [pc, #76]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001afa:	f003 fdbd 	bl	8005678 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b04:	f000 f8f6 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001b16:	f003 fe82 	bl	800581e <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b20:	f000 f8e8 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b24:	2320      	movs	r3, #32
 8001b26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001b32:	f004 f931 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f000 f8da 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000178 	.word	0x20000178

08001b4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b62:	463b      	mov	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <MX_TIM3_Init+0xb0>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b72:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001b80:	2202      	movs	r2, #2
 8001b82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b90:	4819      	ldr	r0, [pc, #100]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001b92:	f003 fd71 	bl	8005678 <HAL_TIM_Base_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b9c:	f000 f8aa 	bl	8001cf4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	4812      	ldr	r0, [pc, #72]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001bb0:	f003 fefe 	bl	80059b0 <HAL_TIM_SlaveConfigSynchro>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001bba:	f000 f89b 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001bcc:	f004 f8e4 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001bd6:	f000 f88d 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  // Set counter to ratio between adc and dac
  htim3.Init.Period = ADC_DAC_RATIO - 1;
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001bdc:	2204      	movs	r2, #4
 8001bde:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_TIM3_Init+0xac>)
 8001be2:	f003 fd49 	bl	8005678 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001bec:	f000 f882 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE END TIM3_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200001c4 	.word	0x200001c4
 8001bfc:	40000400 	.word	0x40000400

08001c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c06:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <MX_USART2_UART_Init+0x5c>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_USART2_UART_Init+0x58>)
 8001c44:	f004 f916 	bl	8005e74 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c4e:	f000 f851 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000210 	.word	0x20000210
 8001c5c:	40004400 	.word	0x40004400

08001c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <MX_DMA_Init+0x48>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca8 <MX_DMA_Init+0x48>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <MX_DMA_Init+0x48>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	200b      	movs	r0, #11
 8001c84:	f001 fb39 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c88:	200b      	movs	r0, #11
 8001c8a:	f001 fb52 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	200d      	movs	r0, #13
 8001c94:	f001 fb31 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c98:	200d      	movs	r0, #13
 8001c9a:	f001 fb4a 	bl	8003332 <HAL_NVIC_EnableIRQ>

}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_GPIO_Init+0x44>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf0 <MX_GPIO_Init+0x44>)
 8001cb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cbc:	6153      	str	r3, [r2, #20]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_GPIO_Init+0x44>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_GPIO_Init+0x44>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	4a08      	ldr	r2, [pc, #32]	@ (8001cf0 <MX_GPIO_Init+0x44>)
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd4:	6153      	str	r3, [r2, #20]
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_GPIO_Init+0x44>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <Error_Handler+0x8>

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_MspInit+0x44>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <HAL_MspInit+0x44>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6193      	str	r3, [r2, #24]
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_MspInit+0x44>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_MspInit+0x44>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_MspInit+0x44>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_MspInit+0x44>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000

08001d48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d68:	d14c      	bne.n	8001e04 <HAL_ADC_MspInit+0xbc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d6a:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	4a21      	ldr	r2, [pc, #132]	@ (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d8c:	6153      	str	r3, [r2, #20]
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <HAL_ADC_MspInit+0xc4>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db0:	f001 ffaa 	bl	8003d08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001db4:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001db6:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_ADC_MspInit+0xcc>)
 8001db8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dc8:	2280      	movs	r2, #128	@ 0x80
 8001dca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001de8:	4809      	ldr	r0, [pc, #36]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dea:	f001 fd79 	bl	80038e0 <HAL_DMA_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001df4:	f7ff ff7e 	bl	8001cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001dfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_ADC_MspInit+0xc8>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	@ 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	200000c8 	.word	0x200000c8
 8001e14:	40020008 	.word	0x40020008

08001e18 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a42      	ldr	r2, [pc, #264]	@ (8001f40 <HAL_DAC_MspInit+0x128>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d153      	bne.n	8001ee2 <HAL_DAC_MspInit+0xca>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e3a:	4b42      	ldr	r3, [pc, #264]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a41      	ldr	r2, [pc, #260]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001e40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4a3b      	ldr	r2, [pc, #236]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e5c:	6153      	str	r3, [r2, #20]
 8001e5e:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e80:	f001 ff42 	bl	8003d08 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001e84:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001e86:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <HAL_DAC_MspInit+0x134>)
 8001e88:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001eac:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001eae:	2220      	movs	r2, #32
 8001eb0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb2:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001eb8:	4823      	ldr	r0, [pc, #140]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001eba:	f001 fd11 	bl	80038e0 <HAL_DMA_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001ec4:	f7ff ff16 	bl	8001cf4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_DAC_MspInit+0x138>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	@ (8001f50 <HAL_DAC_MspInit+0x138>)
 8001ece:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ed2:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_DAC_MspInit+0x130>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6253      	str	r3, [r2, #36]	@ 0x24
    /* USER CODE BEGIN DAC2_MspInit 1 */

    /* USER CODE END DAC2_MspInit 1 */
  }

}
 8001ee0:	e029      	b.n	8001f36 <HAL_DAC_MspInit+0x11e>
  else if(hdac->Instance==DAC2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f54 <HAL_DAC_MspInit+0x13c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d124      	bne.n	8001f36 <HAL_DAC_MspInit+0x11e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001eec:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001ef2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ef6:	61d3      	str	r3, [r2, #28]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	4a0e      	ldr	r2, [pc, #56]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0e:	6153      	str	r3, [r2, #20]
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_DAC_MspInit+0x12c>)
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1c:	2340      	movs	r3, #64	@ 0x40
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f20:	2303      	movs	r3, #3
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f32:	f001 fee9 	bl	8003d08 <HAL_GPIO_Init>
}
 8001f36:	bf00      	nop
 8001f38:	3730      	adds	r7, #48	@ 0x30
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40007400 	.word	0x40007400
 8001f44:	40021000 	.word	0x40021000
 8001f48:	20000134 	.word	0x20000134
 8001f4c:	40020030 	.word	0x40020030
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40009800 	.word	0x40009800

08001f58 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f68:	d10c      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a11      	ldr	r2, [pc, #68]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f82:	e010      	b.n	8001fa6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb8 <HAL_TIM_Base_MspInit+0x60>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40000400 	.word	0x40000400

08001fbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	@ 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_UART_MspInit+0x90>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d131      	bne.n	8002042 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fde:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <HAL_UART_MspInit+0x94>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_UART_MspInit+0x94>)
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_UART_MspInit+0x94>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <HAL_UART_MspInit+0x94>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4a15      	ldr	r2, [pc, #84]	@ (8002050 <HAL_UART_MspInit+0x94>)
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002000:	6153      	str	r3, [r2, #20]
 8002002:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <HAL_UART_MspInit+0x94>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800200e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002020:	2307      	movs	r3, #7
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800202e:	f001 fe6b 	bl	8003d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2026      	movs	r0, #38	@ 0x26
 8002038:	f001 f95f 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800203c:	2026      	movs	r0, #38	@ 0x26
 800203e:	f001 f978 	bl	8003332 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	@ 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40004400 	.word	0x40004400
 8002050:	40021000 	.word	0x40021000

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <NMI_Handler+0x4>

0800205c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <HardFault_Handler+0x4>

08002064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <MemManage_Handler+0x4>

0800206c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <UsageFault_Handler+0x4>

0800207c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020aa:	f000 f8a5 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <DMA1_Channel1_IRQHandler+0x10>)
 80020ba:	f001 fd33 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200000c8 	.word	0x200000c8

080020c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <DMA1_Channel3_IRQHandler+0x10>)
 80020ce:	f001 fd29 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000134 	.word	0x20000134

080020dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020e0:	4803      	ldr	r0, [pc, #12]	@ (80020f0 <USART2_IRQHandler+0x14>)
 80020e2:	f003 ffe3 	bl	80060ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uartInterrupt();
 80020e6:	f7ff f983 	bl	80013f0 <uartInterrupt>
  /* USER CODE END USART2_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000210 	.word	0x20000210

080020f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <SystemInit+0x20>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <SystemInit+0x20>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002150 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800211c:	f7ff ffea 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002120:	480c      	ldr	r0, [pc, #48]	@ (8002154 <LoopForever+0x6>)
  ldr r1, =_edata
 8002122:	490d      	ldr	r1, [pc, #52]	@ (8002158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <LoopForever+0xe>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002138:	4c0a      	ldr	r4, [pc, #40]	@ (8002164 <LoopForever+0x16>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002146:	f005 f8d9 	bl	80072fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800214a:	f7ff f9f5 	bl	8001538 <main>

0800214e <LoopForever>:

LoopForever:
    b LoopForever
 800214e:	e7fe      	b.n	800214e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002150:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800215c:	080085bc 	.word	0x080085bc
  ldr r2, =_sbss
 8002160:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002164:	200011f4 	.word	0x200011f4

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_Init+0x28>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <HAL_Init+0x28>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f001 f8b1 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fdba 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 f8d7 	bl	800336a <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f001 f891 	bl	80032fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	@ (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008
 800221c:	200010b8 	.word	0x200010b8

08002220 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;  
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200010b8 	.word	0x200010b8

08002238 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b09a      	sub	sp, #104	@ 0x68
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e172      	b.n	80025c2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d176      	bne.n	80023dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d152      	bne.n	800239c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fd19 	bl	8001d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d13b      	bne.n	800239c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fe83 	bl	8003030 <ADC_Disable>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d12f      	bne.n	800239c <HAL_ADC_Init+0xe0>
 800233c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002340:	2b00      	cmp	r3, #0
 8002342:	d12b      	bne.n	800239c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800234c:	f023 0302 	bic.w	r3, r3, #2
 8002350:	f043 0202 	orr.w	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002366:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002376:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002378:	4b94      	ldr	r3, [pc, #592]	@ (80025cc <HAL_ADC_Init+0x310>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a94      	ldr	r2, [pc, #592]	@ (80025d0 <HAL_ADC_Init+0x314>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0c9a      	lsrs	r2, r3, #18
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800238e:	e002      	b.n	8002396 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3b01      	subs	r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f9      	bne.n	8002390 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023b8:	d110      	bne.n	80023dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f023 0312 	bic.w	r3, r3, #18
 80023c2:	f043 0210 	orr.w	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 80df 	bne.w	80025a8 <HAL_ADC_Init+0x2ec>
 80023ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 80da 	bne.w	80025a8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 80d2 	bne.w	80025a8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800240c:	f043 0202 	orr.w	r2, r3, #2
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002414:	4b6f      	ldr	r3, [pc, #444]	@ (80025d4 <HAL_ADC_Init+0x318>)
 8002416:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002420:	d102      	bne.n	8002428 <HAL_ADC_Init+0x16c>
 8002422:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_ADC_Init+0x31c>)
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e002      	b.n	800242e <HAL_ADC_Init+0x172>
 8002428:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800242c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d108      	bne.n	800244e <HAL_ADC_Init+0x192>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_Init+0x192>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_ADC_Init+0x194>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d11c      	bne.n	800248e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002454:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_ADC_Init+0x1ba>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_ADC_Init+0x1ba>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_ADC_Init+0x1bc>
 8002476:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002478:	2b00      	cmp	r3, #0
 800247a:	d108      	bne.n	800248e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800247c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	431a      	orrs	r2, r3
 800248a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800248c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7e5b      	ldrb	r3, [r3, #25]
 8002492:	035b      	lsls	r3, r3, #13
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002498:	2a01      	cmp	r2, #1
 800249a:	d002      	beq.n	80024a2 <HAL_ADC_Init+0x1e6>
 800249c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024a0:	e000      	b.n	80024a4 <HAL_ADC_Init+0x1e8>
 80024a2:	2200      	movs	r2, #0
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024b4:	4313      	orrs	r3, r2
 80024b6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d11b      	bne.n	80024fa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e5b      	ldrb	r3, [r3, #25]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	3b01      	subs	r3, #1
 80024d0:	045a      	lsls	r2, r3, #17
 80024d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024da:	663b      	str	r3, [r7, #96]	@ 0x60
 80024dc:	e00d      	b.n	80024fa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80024e6:	f043 0220 	orr.w	r2, r3, #32
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d007      	beq.n	8002512 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	4313      	orrs	r3, r2
 800250c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800250e:	4313      	orrs	r3, r2
 8002510:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b00      	cmp	r3, #0
 800251e:	d114      	bne.n	800254a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800252e:	f023 0302 	bic.w	r3, r3, #2
 8002532:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e1b      	ldrb	r3, [r3, #24]
 8002538:	039a      	lsls	r2, r3, #14
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4313      	orrs	r3, r2
 8002544:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002546:	4313      	orrs	r3, r2
 8002548:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b22      	ldr	r3, [pc, #136]	@ (80025dc <HAL_ADC_Init+0x320>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800255a:	430b      	orrs	r3, r1
 800255c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10c      	bne.n	8002580 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	f023 010f 	bic.w	r1, r3, #15
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	631a      	str	r2, [r3, #48]	@ 0x30
 800257e:	e007      	b.n	8002590 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 020f 	bic.w	r2, r2, #15
 800258e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80025a6:	e00a      	b.n	80025be <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f023 0312 	bic.w	r3, r3, #18
 80025b0:	f043 0210 	orr.w	r2, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80025b8:	2301      	movs	r3, #1
 80025ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80025be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3768      	adds	r7, #104	@ 0x68
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000000 	.word	0x20000000
 80025d0:	431bde83 	.word	0x431bde83
 80025d4:	50000300 	.word	0x50000300
 80025d8:	50000100 	.word	0x50000100
 80025dc:	fff0c007 	.word	0xfff0c007

080025e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80b9 	bne.w	8002772 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADC_Start_DMA+0x2e>
 800260a:	2302      	movs	r3, #2
 800260c:	e0b4      	b.n	8002778 <HAL_ADC_Start_DMA+0x198>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002616:	4b5a      	ldr	r3, [pc, #360]	@ (8002780 <HAL_ADC_Start_DMA+0x1a0>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80a0 	bne.w	8002764 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fc9f 	bl	8002f68 <ADC_Enable>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f040 8092 	bne.w	800275a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800264a:	4b4d      	ldr	r3, [pc, #308]	@ (8002780 <HAL_ADC_Start_DMA+0x1a0>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_ADC_Start_DMA+0x80>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800265e:	d115      	bne.n	800268c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d027      	beq.n	80026ca <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002682:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800268a:	e01e      	b.n	80026ca <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a0:	d004      	beq.n	80026ac <HAL_ADC_Start_DMA+0xcc>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a37      	ldr	r2, [pc, #220]	@ (8002784 <HAL_ADC_Start_DMA+0x1a4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d10e      	bne.n	80026ca <HAL_ADC_Start_DMA+0xea>
 80026ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d6:	d106      	bne.n	80026e6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	f023 0206 	bic.w	r2, r3, #6
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80026e4:	e002      	b.n	80026ec <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	4a23      	ldr	r2, [pc, #140]	@ (8002788 <HAL_ADC_Start_DMA+0x1a8>)
 80026fa:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	4a22      	ldr	r2, [pc, #136]	@ (800278c <HAL_ADC_Start_DMA+0x1ac>)
 8002702:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	4a21      	ldr	r2, [pc, #132]	@ (8002790 <HAL_ADC_Start_DMA+0x1b0>)
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	221c      	movs	r2, #28
 8002712:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0210 	orr.w	r2, r2, #16
 8002722:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3340      	adds	r3, #64	@ 0x40
 800273e:	4619      	mov	r1, r3
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f001 f913 	bl	800396e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0204 	orr.w	r2, r2, #4
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	e00d      	b.n	8002776 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002762:	e008      	b.n	8002776 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002770:	e001      	b.n	8002776 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	50000300 	.word	0x50000300
 8002784:	50000100 	.word	0x50000100
 8002788:	08002e9d 	.word	0x08002e9d
 800278c:	08002f17 	.word	0x08002f17
 8002790:	08002f33 	.word	0x08002f33

08002794 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002794:	b480      	push	{r7}
 8002796:	b09b      	sub	sp, #108	@ 0x6c
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x22>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e2a1      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x566>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 8285 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d81c      	bhi.n	8002810 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	461a      	mov	r2, r3
 80027ea:	231f      	movs	r3, #31
 80027ec:	4093      	lsls	r3, r2
 80027ee:	43db      	mvns	r3, r3
 80027f0:	4019      	ands	r1, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa00 f203 	lsl.w	r2, r0, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
 800280e:	e063      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b09      	cmp	r3, #9
 8002816:	d81e      	bhi.n	8002856 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	3b1e      	subs	r3, #30
 800282c:	221f      	movs	r2, #31
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	4019      	ands	r1, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	3b1e      	subs	r3, #30
 8002848:	fa00 f203 	lsl.w	r2, r0, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	635a      	str	r2, [r3, #52]	@ 0x34
 8002854:	e040      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b0e      	cmp	r3, #14
 800285c:	d81e      	bhi.n	800289c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	3b3c      	subs	r3, #60	@ 0x3c
 8002872:	221f      	movs	r2, #31
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	4019      	ands	r1, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	3b3c      	subs	r3, #60	@ 0x3c
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38
 800289a:	e01d      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	3b5a      	subs	r3, #90	@ 0x5a
 80028b0:	221f      	movs	r2, #31
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	4019      	ands	r1, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	3b5a      	subs	r3, #90	@ 0x5a
 80028cc:	fa00 f203 	lsl.w	r2, r0, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 80e5 	bne.w	8002ab2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d91c      	bls.n	800292a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6999      	ldr	r1, [r3, #24]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	3b1e      	subs	r3, #30
 8002902:	2207      	movs	r2, #7
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	4019      	ands	r1, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6898      	ldr	r0, [r3, #8]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	3b1e      	subs	r3, #30
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	e019      	b.n	800295e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	2207      	movs	r2, #7
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	4019      	ands	r1, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6898      	ldr	r0, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	3b01      	subs	r3, #1
 800297c:	2b03      	cmp	r3, #3
 800297e:	d84f      	bhi.n	8002a20 <HAL_ADC_ConfigChannel+0x28c>
 8002980:	a201      	add	r2, pc, #4	@ (adr r2, 8002988 <HAL_ADC_ConfigChannel+0x1f4>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002999 	.word	0x08002999
 800298c:	080029bb 	.word	0x080029bb
 8002990:	080029dd 	.word	0x080029dd
 8002994:	080029ff 	.word	0x080029ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800299e:	4b9c      	ldr	r3, [pc, #624]	@ (8002c10 <HAL_ADC_ConfigChannel+0x47c>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	0691      	lsls	r1, r2, #26
 80029a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029aa:	430a      	orrs	r2, r1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029b6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029b8:	e07b      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029c0:	4b93      	ldr	r3, [pc, #588]	@ (8002c10 <HAL_ADC_ConfigChannel+0x47c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	0691      	lsls	r1, r2, #26
 80029ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029cc:	430a      	orrs	r2, r1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029d8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029da:	e06a      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80029e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c10 <HAL_ADC_ConfigChannel+0x47c>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	0691      	lsls	r1, r2, #26
 80029ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029ee:	430a      	orrs	r2, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029fa:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029fc:	e059      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a04:	4b82      	ldr	r3, [pc, #520]	@ (8002c10 <HAL_ADC_ConfigChannel+0x47c>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	0691      	lsls	r1, r2, #26
 8002a0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a10:	430a      	orrs	r2, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a1c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a1e:	e048      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a42:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	069b      	lsls	r3, r3, #26
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a66:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	069b      	lsls	r3, r3, #26
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a8a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002aae:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002ab0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d108      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x33e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x33e>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x340>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 810a 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d00f      	beq.n	8002b02 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002b00:	e049      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	d91c      	bls.n	8002b5e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6999      	ldr	r1, [r3, #24]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	3b1b      	subs	r3, #27
 8002b36:	2207      	movs	r2, #7
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4019      	ands	r1, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6898      	ldr	r0, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b1b      	subs	r3, #27
 8002b50:	fa00 f203 	lsl.w	r2, r0, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	619a      	str	r2, [r3, #24]
 8002b5c:	e01b      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6959      	ldr	r1, [r3, #20]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	2207      	movs	r2, #7
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	4019      	ands	r1, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6898      	ldr	r0, [r3, #8]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b96:	4b1f      	ldr	r3, [pc, #124]	@ (8002c14 <HAL_ADC_ConfigChannel+0x480>)
 8002b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d105      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bb2:	2b11      	cmp	r3, #17
 8002bb4:	d105      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bc6:	2b12      	cmp	r3, #18
 8002bc8:	f040 8091 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 808a 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002be2:	d102      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x456>
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <HAL_ADC_ConfigChannel+0x484>)
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e002      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x45c>
 8002bea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bee:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10e      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x488>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x488>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e006      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x48a>
 8002c10:	83fff000 	.word	0x83fff000
 8002c14:	50000300 	.word	0x50000300
 8002c18:	50000100 	.word	0x50000100
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d150      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d107      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x4b0>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x4b0>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x4b2>
 8002c44:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d13c      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d11d      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x4fa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c5a:	d118      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c66:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_ADC_ConfigChannel+0x574>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a27      	ldr	r2, [pc, #156]	@ (8002d0c <HAL_ADC_ConfigChannel+0x578>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0c9a      	lsrs	r2, r3, #18
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c7e:	e002      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c8c:	e02e      	b.n	8002cec <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b11      	cmp	r3, #17
 8002c94:	d10b      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x51a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9e:	d106      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002ca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002caa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cac:	e01e      	b.n	8002cec <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b12      	cmp	r3, #18
 8002cb4:	d11a      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cc2:	e013      	b.n	8002cec <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002cd6:	e00a      	b.n	8002cee <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002cea:	e000      	b.n	8002cee <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	376c      	adds	r7, #108	@ 0x6c
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	431bde83 	.word	0x431bde83

08002d10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b099      	sub	sp, #100	@ 0x64
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d28:	d102      	bne.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	e002      	b.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002d30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d34:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0a2      	b.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e09b      	b.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d17f      	bne.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d179      	bne.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d70:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002d72:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d040      	beq.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d8e:	035b      	lsls	r3, r3, #13
 8002d90:	430b      	orrs	r3, r1
 8002d92:	431a      	orrs	r2, r3
 8002d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d96:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d108      	bne.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d15c      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002dda:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d14b      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002de8:	f023 030f 	bic.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	6811      	ldr	r1, [r2, #0]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dfa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dfc:	e03c      	b.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e08:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d108      	bne.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d123      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002e4c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d112      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e5a:	f023 030f 	bic.w	r3, r3, #15
 8002e5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e60:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e62:	e009      	b.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002e76:	e000      	b.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e78:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002e86:	4618      	mov	r0, r3
 8002e88:	3764      	adds	r7, #100	@ 0x64
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	50000100 	.word	0x50000100
 8002e98:	50000300 	.word	0x50000300

08002e9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d126      	bne.n	8002f04 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d115      	bne.n	8002efc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff f9bf 	bl	8002280 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f02:	e004      	b.n	8002f0e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff f9b5 	bl	8002294 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff f9a5 	bl	80022a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <ADC_Enable+0x2c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <ADC_Enable+0x2c>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <ADC_Enable+0x2e>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d143      	bne.n	8003022 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	4b22      	ldr	r3, [pc, #136]	@ (800302c <ADC_Enable+0xc4>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	f043 0210 	orr.w	r2, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb8:	f043 0201 	orr.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e02f      	b.n	8003024 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002fd4:	f7ff f924 	bl	8002220 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fda:	e01b      	b.n	8003014 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fdc:	f7ff f920 	bl	8002220 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d914      	bls.n	8003014 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d00d      	beq.n	8003014 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d1dc      	bne.n	8002fdc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	8000003f 	.word	0x8000003f

08003030 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d108      	bne.n	800305c <ADC_Disable+0x2c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <ADC_Disable+0x2c>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <ADC_Disable+0x2e>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d047      	beq.n	80030f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030d 	and.w	r3, r3, #13
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10f      	bne.n	8003090 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0202 	orr.w	r2, r2, #2
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2203      	movs	r2, #3
 8003086:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003088:	f7ff f8ca 	bl	8002220 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800308e:	e029      	b.n	80030e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0210 	orr.w	r2, r3, #16
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e023      	b.n	80030f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030ac:	f7ff f8b8 	bl	8002220 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d914      	bls.n	80030e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0210 	orr.w	r2, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d0dc      	beq.n	80030ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	@ (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db12      	blt.n	80031d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	490a      	ldr	r1, [pc, #40]	@ (80031e0 <__NVIC_DisableIRQ+0x44>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	3320      	adds	r3, #32
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031c8:	f3bf 8f4f 	dsb	sy
}
 80031cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031ce:	f3bf 8f6f 	isb	sy
}
 80031d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	@ (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	@ (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	@ 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	@ 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	@ (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f7ff ff8e 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff05 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff1a 	bl	8003144 <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff8e 	bl	8003238 <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5d 	bl	80031e4 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff0d 	bl	8003160 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff1d 	bl	800319c <__NVIC_DisableIRQ>
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ff94 	bl	80032a0 <SysTick_Config>
 8003378:	4603      	mov	r3, r0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e014      	b.n	80033be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	791b      	ldrb	r3, [r3, #4]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d105      	bne.n	80033aa <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fe fd37 	bl	8001e18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43da      	mvns	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	400a      	ands	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43da      	mvns	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	400a      	ands	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fb0b 	bl	8003a2c <HAL_DMA_Abort>
 8003416:	4603      	mov	r3, r0
 8003418:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e00e      	b.n	800344a <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fafb 	bl	8003a2c <HAL_DMA_Abort>
 8003436:	4603      	mov	r3, r0
 8003438:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003448:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2204      	movs	r2, #4
 8003454:	711a      	strb	r2, [r3, #4]
 8003456:	e002      	b.n	800345e <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	3308      	adds	r3, #8
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e004      	b.n	80034d8 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3314      	adds	r3, #20
 80034d6:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	461a      	mov	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	795b      	ldrb	r3, [r3, #5]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_DAC_Start+0x16>
 8003500:	2302      	movs	r3, #2
 8003502:	e039      	b.n	8003578 <HAL_DAC_Start+0x8a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	409a      	lsls	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003534:	2b3c      	cmp	r3, #60	@ 0x3c
 8003536:	d118      	bne.n	800356a <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	e00f      	b.n	800356a <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003554:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8003558:	d107      	bne.n	800356a <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0202 	orr.w	r2, r2, #2
 8003568:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	795b      	ldrb	r3, [r3, #5]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_DAC_Start_DMA+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e09b      	b.n	80036da <HAL_DAC_Start_DMA+0x156>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2202      	movs	r2, #2
 80035ac:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d12f      	bne.n	8003614 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a4a      	ldr	r2, [pc, #296]	@ (80036e4 <HAL_DAC_Start_DMA+0x160>)
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a49      	ldr	r2, [pc, #292]	@ (80036e8 <HAL_DAC_Start_DMA+0x164>)
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a48      	ldr	r2, [pc, #288]	@ (80036ec <HAL_DAC_Start_DMA+0x168>)
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035da:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d013      	beq.n	800360a <HAL_DAC_Start_DMA+0x86>
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d845      	bhi.n	8003674 <HAL_DAC_Start_DMA+0xf0>
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_DAC_Start_DMA+0x72>
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d005      	beq.n	8003600 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80035f4:	e03e      	b.n	8003674 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3308      	adds	r3, #8
 80035fc:	617b      	str	r3, [r7, #20]
        break;
 80035fe:	e03c      	b.n	800367a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	617b      	str	r3, [r7, #20]
        break;
 8003608:	e037      	b.n	800367a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3310      	adds	r3, #16
 8003610:	617b      	str	r3, [r7, #20]
        break;
 8003612:	e032      	b.n	800367a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a35      	ldr	r2, [pc, #212]	@ (80036f0 <HAL_DAC_Start_DMA+0x16c>)
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a34      	ldr	r2, [pc, #208]	@ (80036f4 <HAL_DAC_Start_DMA+0x170>)
 8003622:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a33      	ldr	r2, [pc, #204]	@ (80036f8 <HAL_DAC_Start_DMA+0x174>)
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d013      	beq.n	800366a <HAL_DAC_Start_DMA+0xe6>
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d817      	bhi.n	8003678 <HAL_DAC_Start_DMA+0xf4>
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DAC_Start_DMA+0xd2>
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d005      	beq.n	8003660 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003654:	e010      	b.n	8003678 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	617b      	str	r3, [r7, #20]
        break;
 800365e:	e00c      	b.n	800367a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3318      	adds	r3, #24
 8003666:	617b      	str	r3, [r7, #20]
        break;
 8003668:	e007      	b.n	800367a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	331c      	adds	r3, #28
 8003670:	617b      	str	r3, [r7, #20]
        break;
 8003672:	e002      	b.n	800367a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003674:	bf00      	nop
 8003676:	e000      	b.n	800367a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003678:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10f      	bne.n	80036a0 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800368e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6898      	ldr	r0, [r3, #8]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	f000 f968 	bl	800396e <HAL_DMA_Start_IT>
 800369e:	e00e      	b.n	80036be <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80036ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	68d8      	ldr	r0, [r3, #12]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	f000 f958 	bl	800396e <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	08003809 	.word	0x08003809
 80036e8:	0800382b 	.word	0x0800382b
 80036ec:	08003847 	.word	0x08003847
 80036f0:	08003875 	.word	0x08003875
 80036f4:	08003897 	.word	0x08003897
 80036f8:	080038b3 	.word	0x080038b3

080036fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	795b      	ldrb	r3, [r3, #5]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_DAC_ConfigChannel+0x20>
 8003718:	2302      	movs	r3, #2
 800371a:	e04e      	b.n	80037ba <HAL_DAC_ConfigChannel+0xbe>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2202      	movs	r2, #2
 8003726:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a24      	ldr	r2, [pc, #144]	@ (80037c8 <HAL_DAC_ConfigChannel+0xcc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d112      	bne.n	8003760 <HAL_DAC_ConfigChannel+0x64>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10f      	bne.n	8003760 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003740:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4013      	ands	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	e00e      	b.n	800377e <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8003760:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4013      	ands	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	22c0      	movs	r2, #192	@ 0xc0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	400a      	ands	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40007400 	.word	0x40007400

080037cc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff fe26 	bl	8003468 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	711a      	strb	r2, [r3, #4]
}
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fe1f 	bl	800347c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff fe15 	bl	8003490 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	711a      	strb	r2, [r3, #4]
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ffa2 	bl	80037cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	711a      	strb	r2, [r3, #4]
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff ff9b 	bl	80037e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff91 	bl	80037f4 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	711a      	strb	r2, [r3, #4]
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e037      	b.n	8003966 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800390c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003910:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800391a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f9bd 	bl	8003cc8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_DMA_Start_IT+0x20>
 800398a:	2302      	movs	r3, #2
 800398c:	e04a      	b.n	8003a24 <HAL_DMA_Start_IT+0xb6>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800399c:	2b01      	cmp	r3, #1
 800399e:	d13a      	bne.n	8003a16 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f950 	bl	8003c6a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 020e 	orr.w	r2, r2, #14
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e00f      	b.n	8003a04 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 020a 	orr.w	r2, r2, #10
 80039f2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e005      	b.n	8003a22 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e02e      	b.n	8003a9c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d008      	beq.n	8003a5a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e020      	b.n	8003a9c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 020e 	bic.w	r2, r2, #14
 8003a68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d005      	beq.n	8003aca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	e027      	b.n	8003b1a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 020e 	bic.w	r2, r2, #14
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f202 	lsl.w	r2, r1, r2
 8003af8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
    }
  }
  return status;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	2204      	movs	r2, #4
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d024      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x72>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01f      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	2104      	movs	r1, #4
 8003b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b82:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06a      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b94:	e065      	b.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d02c      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xdc>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d027      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 020a 	bic.w	r2, r2, #10
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bde:	2102      	movs	r1, #2
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d035      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bfe:	e030      	b.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	2208      	movs	r2, #8
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d028      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d023      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 020e 	bic.w	r2, r2, #14
 8003c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
    }
  }
}
 8003c60:	e7ff      	b.n	8003c62 <HAL_DMA_IRQHandler+0x13e>
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d108      	bne.n	8003caa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ca8:	e007      	b.n	8003cba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <DMA_CalcBaseAndBitshift+0x34>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	4a09      	ldr	r2, [pc, #36]	@ (8003d00 <DMA_CalcBaseAndBitshift+0x38>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	009a      	lsls	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a06      	ldr	r2, [pc, #24]	@ (8003d04 <DMA_CalcBaseAndBitshift+0x3c>)
 8003cec:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	bffdfff8 	.word	0xbffdfff8
 8003d00:	cccccccd 	.word	0xcccccccd
 8003d04:	40020000 	.word	0x40020000

08003d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d16:	e14e      	b.n	8003fb6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8140 	beq.w	8003fb0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d005      	beq.n	8003d48 <HAL_GPIO_Init+0x40>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d130      	bne.n	8003daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d7e:	2201      	movs	r2, #1
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 0201 	and.w	r2, r3, #1
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d017      	beq.n	8003de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d123      	bne.n	8003e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	08da      	lsrs	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3208      	adds	r2, #8
 8003dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	220f      	movs	r2, #15
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	08da      	lsrs	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3208      	adds	r2, #8
 8003e34:	6939      	ldr	r1, [r7, #16]
 8003e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0203 	and.w	r2, r3, #3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 809a 	beq.w	8003fb0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7c:	4b55      	ldr	r3, [pc, #340]	@ (8003fd4 <HAL_GPIO_Init+0x2cc>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	4a54      	ldr	r2, [pc, #336]	@ (8003fd4 <HAL_GPIO_Init+0x2cc>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6193      	str	r3, [r2, #24]
 8003e88:	4b52      	ldr	r3, [pc, #328]	@ (8003fd4 <HAL_GPIO_Init+0x2cc>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e94:	4a50      	ldr	r2, [pc, #320]	@ (8003fd8 <HAL_GPIO_Init+0x2d0>)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	220f      	movs	r2, #15
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ebe:	d013      	beq.n	8003ee8 <HAL_GPIO_Init+0x1e0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a46      	ldr	r2, [pc, #280]	@ (8003fdc <HAL_GPIO_Init+0x2d4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_GPIO_Init+0x1dc>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a45      	ldr	r2, [pc, #276]	@ (8003fe0 <HAL_GPIO_Init+0x2d8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <HAL_GPIO_Init+0x1d8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a44      	ldr	r2, [pc, #272]	@ (8003fe4 <HAL_GPIO_Init+0x2dc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_GPIO_Init+0x1d4>
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e006      	b.n	8003eea <HAL_GPIO_Init+0x1e2>
 8003edc:	2305      	movs	r3, #5
 8003ede:	e004      	b.n	8003eea <HAL_GPIO_Init+0x1e2>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e002      	b.n	8003eea <HAL_GPIO_Init+0x1e2>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_GPIO_Init+0x1e2>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	f002 0203 	and.w	r2, r2, #3
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	4093      	lsls	r3, r2
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003efa:	4937      	ldr	r1, [pc, #220]	@ (8003fd8 <HAL_GPIO_Init+0x2d0>)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	3302      	adds	r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f08:	4b37      	ldr	r3, [pc, #220]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f32:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f56:	4a24      	ldr	r2, [pc, #144]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f5c:	4b22      	ldr	r3, [pc, #136]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f80:	4a19      	ldr	r2, [pc, #100]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f86:	4b18      	ldr	r3, [pc, #96]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003faa:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe8 <HAL_GPIO_Init+0x2e0>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f aea9 	bne.w	8003d18 <HAL_GPIO_Init+0x10>
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	48000400 	.word	0x48000400
 8003fe0:	48000800 	.word	0x48000800
 8003fe4:	48000c00 	.word	0x48000c00
 8003fe8:	40010400 	.word	0x40010400

08003fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ffc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004002:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f000 bff4 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 816d 	beq.w	8004302 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004028:	4bb4      	ldr	r3, [pc, #720]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b04      	cmp	r3, #4
 8004032:	d00c      	beq.n	800404e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004034:	4bb1      	ldr	r3, [pc, #708]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d157      	bne.n	80040f0 <HAL_RCC_OscConfig+0x104>
 8004040:	4bae      	ldr	r3, [pc, #696]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404c:	d150      	bne.n	80040f0 <HAL_RCC_OscConfig+0x104>
 800404e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004052:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004062:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b3f      	cmp	r3, #63	@ 0x3f
 800406e:	d802      	bhi.n	8004076 <HAL_RCC_OscConfig+0x8a>
 8004070:	4ba2      	ldr	r3, [pc, #648]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	e015      	b.n	80040a2 <HAL_RCC_OscConfig+0xb6>
 8004076:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800407a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800408a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800408e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004092:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800409e:	4b97      	ldr	r3, [pc, #604]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040a6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80040aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80040ae:	fa92 f2a2 	rbit	r2, r2
 80040b2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80040b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80040ba:	fab2 f282 	clz	r2, r2
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	f042 0220 	orr.w	r2, r2, #32
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	f002 021f 	and.w	r2, r2, #31
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f202 	lsl.w	r2, r1, r2
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8114 	beq.w	8004300 <HAL_RCC_OscConfig+0x314>
 80040d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 810b 	bne.w	8004300 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f000 bf85 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x124>
 8004102:	4b7e      	ldr	r3, [pc, #504]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7d      	ldr	r2, [pc, #500]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e036      	b.n	800417e <HAL_RCC_OscConfig+0x192>
 8004110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <HAL_RCC_OscConfig+0x14e>
 8004120:	4b76      	ldr	r3, [pc, #472]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a75      	ldr	r2, [pc, #468]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b73      	ldr	r3, [pc, #460]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a72      	ldr	r2, [pc, #456]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e021      	b.n	800417e <HAL_RCC_OscConfig+0x192>
 800413a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800414a:	d10c      	bne.n	8004166 <HAL_RCC_OscConfig+0x17a>
 800414c:	4b6b      	ldr	r3, [pc, #428]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6a      	ldr	r2, [pc, #424]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004152:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b68      	ldr	r3, [pc, #416]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a67      	ldr	r2, [pc, #412]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 800415e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e00b      	b.n	800417e <HAL_RCC_OscConfig+0x192>
 8004166:	4b65      	ldr	r3, [pc, #404]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a64      	ldr	r2, [pc, #400]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 800416c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b62      	ldr	r3, [pc, #392]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a61      	ldr	r2, [pc, #388]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004178:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800417c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800417e:	4b5f      	ldr	r3, [pc, #380]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	f023 020f 	bic.w	r2, r3, #15
 8004186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	495a      	ldr	r1, [pc, #360]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004194:	4313      	orrs	r3, r2
 8004196:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d054      	beq.n	8004252 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe f83a 	bl	8002220 <HAL_GetTick>
 80041ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b2:	f7fe f835 	bl	8002220 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	@ 0x64
 80041c0:	d902      	bls.n	80041c8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	f000 bf19 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
 80041c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041cc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80041dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80041e8:	d802      	bhi.n	80041f0 <HAL_RCC_OscConfig+0x204>
 80041ea:	4b44      	ldr	r3, [pc, #272]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	e015      	b.n	800421c <HAL_RCC_OscConfig+0x230>
 80041f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041f4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004208:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800420c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004218:	4b38      	ldr	r3, [pc, #224]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004220:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004224:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004228:	fa92 f2a2 	rbit	r2, r2
 800422c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004230:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004234:	fab2 f282 	clz	r2, r2
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	f042 0220 	orr.w	r2, r2, #32
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	f002 021f 	and.w	r2, r2, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0b0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1c6>
 8004250:	e057      	b.n	8004302 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004252:	f7fd ffe5 	bl	8002220 <HAL_GetTick>
 8004256:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7fd ffe0 	bl	8002220 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b64      	cmp	r3, #100	@ 0x64
 800426a:	d902      	bls.n	8004272 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	f000 bec4 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004272:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004276:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004286:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b3f      	cmp	r3, #63	@ 0x3f
 8004292:	d802      	bhi.n	800429a <HAL_RCC_OscConfig+0x2ae>
 8004294:	4b19      	ldr	r3, [pc, #100]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	e015      	b.n	80042c6 <HAL_RCC_OscConfig+0x2da>
 800429a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800429e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80042ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042b2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80042b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80042c2:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <HAL_RCC_OscConfig+0x310>)
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042ca:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80042ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80042d2:	fa92 f2a2 	rbit	r2, r2
 80042d6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80042da:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80042de:	fab2 f282 	clz	r2, r2
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	f042 0220 	orr.w	r2, r2, #32
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	f002 021f 	and.w	r2, r2, #31
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f202 	lsl.w	r2, r1, r2
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1b0      	bne.n	800425c <HAL_RCC_OscConfig+0x270>
 80042fa:	e002      	b.n	8004302 <HAL_RCC_OscConfig+0x316>
 80042fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004306:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 816c 	beq.w	80045f0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004318:	4bcc      	ldr	r3, [pc, #816]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004324:	4bc9      	ldr	r3, [pc, #804]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d16d      	bne.n	800440c <HAL_RCC_OscConfig+0x420>
 8004330:	4bc6      	ldr	r3, [pc, #792]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d167      	bne.n	800440c <HAL_RCC_OscConfig+0x420>
 800433c:	2302      	movs	r3, #2
 800433e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800434e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b3f      	cmp	r3, #63	@ 0x3f
 800435a:	d802      	bhi.n	8004362 <HAL_RCC_OscConfig+0x376>
 800435c:	4bbb      	ldr	r3, [pc, #748]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	e013      	b.n	800438a <HAL_RCC_OscConfig+0x39e>
 8004362:	2302      	movs	r3, #2
 8004364:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004374:	2302      	movs	r3, #2
 8004376:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800437a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004386:	4bb1      	ldr	r3, [pc, #708]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	2202      	movs	r2, #2
 800438c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004390:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004394:	fa92 f2a2 	rbit	r2, r2
 8004398:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800439c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043a0:	fab2 f282 	clz	r2, r2
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f042 0220 	orr.w	r2, r2, #32
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	f002 021f 	and.w	r2, r2, #31
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCC_OscConfig+0x3e6>
 80043bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d002      	beq.n	80043d2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f000 be14 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d2:	4b9e      	ldr	r3, [pc, #632]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	21f8      	movs	r1, #248	@ 0xf8
 80043e8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80043f0:	fa91 f1a1 	rbit	r1, r1
 80043f4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80043f8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80043fc:	fab1 f181 	clz	r1, r1
 8004400:	b2c9      	uxtb	r1, r1
 8004402:	408b      	lsls	r3, r1
 8004404:	4991      	ldr	r1, [pc, #580]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	e0f1      	b.n	80045f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800440c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8083 	beq.w	8004524 <HAL_RCC_OscConfig+0x538>
 800441e:	2301      	movs	r3, #1
 8004420:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004430:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	fab3 f383 	clz	r3, r3
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800443e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	461a      	mov	r2, r3
 8004446:	2301      	movs	r3, #1
 8004448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd fee9 	bl	8002220 <HAL_GetTick>
 800444e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004454:	f7fd fee4 	bl	8002220 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d902      	bls.n	800446a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	f000 bdc8 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
 800446a:	2302      	movs	r3, #2
 800446c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800447c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004480:	fab3 f383 	clz	r3, r3
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b3f      	cmp	r3, #63	@ 0x3f
 8004488:	d802      	bhi.n	8004490 <HAL_RCC_OscConfig+0x4a4>
 800448a:	4b70      	ldr	r3, [pc, #448]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	e013      	b.n	80044b8 <HAL_RCC_OscConfig+0x4cc>
 8004490:	2302      	movs	r3, #2
 8004492:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80044a2:	2302      	movs	r3, #2
 80044a4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80044a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80044b4:	4b65      	ldr	r3, [pc, #404]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	2202      	movs	r2, #2
 80044ba:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80044be:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80044c2:	fa92 f2a2 	rbit	r2, r2
 80044c6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80044ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80044ce:	fab2 f282 	clz	r2, r2
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	f042 0220 	orr.w	r2, r2, #32
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	f002 021f 	and.w	r2, r2, #31
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f202 	lsl.w	r2, r1, r2
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0b4      	beq.n	8004454 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b58      	ldr	r3, [pc, #352]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	21f8      	movs	r1, #248	@ 0xf8
 8004500:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004508:	fa91 f1a1 	rbit	r1, r1
 800450c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004510:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004514:	fab1 f181 	clz	r1, r1
 8004518:	b2c9      	uxtb	r1, r1
 800451a:	408b      	lsls	r3, r1
 800451c:	494b      	ldr	r1, [pc, #300]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
 8004522:	e065      	b.n	80045f0 <HAL_RCC_OscConfig+0x604>
 8004524:	2301      	movs	r3, #1
 8004526:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004536:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004544:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	461a      	mov	r2, r3
 800454c:	2300      	movs	r3, #0
 800454e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd fe66 	bl	8002220 <HAL_GetTick>
 8004554:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455a:	f7fd fe61 	bl	8002220 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d902      	bls.n	8004570 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	f000 bd45 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004570:	2302      	movs	r3, #2
 8004572:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800457a:	fa93 f3a3 	rbit	r3, r3
 800457e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004582:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b3f      	cmp	r3, #63	@ 0x3f
 800458e:	d802      	bhi.n	8004596 <HAL_RCC_OscConfig+0x5aa>
 8004590:	4b2e      	ldr	r3, [pc, #184]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	e013      	b.n	80045be <HAL_RCC_OscConfig+0x5d2>
 8004596:	2302      	movs	r3, #2
 8004598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80045a8:	2302      	movs	r3, #2
 80045aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80045ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80045ba:	4b24      	ldr	r3, [pc, #144]	@ (800464c <HAL_RCC_OscConfig+0x660>)
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	2202      	movs	r2, #2
 80045c0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80045c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80045c8:	fa92 f2a2 	rbit	r2, r2
 80045cc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80045d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80045d4:	fab2 f282 	clz	r2, r2
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	f042 0220 	orr.w	r2, r2, #32
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	f002 021f 	and.w	r2, r2, #31
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1b4      	bne.n	800455a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8115 	beq.w	8004830 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d07e      	beq.n	8004714 <HAL_RCC_OscConfig+0x728>
 8004616:	2301      	movs	r3, #1
 8004618:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCC_OscConfig+0x664>)
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	461a      	mov	r2, r3
 800463c:	2301      	movs	r3, #1
 800463e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004640:	f7fd fdee 	bl	8002220 <HAL_GetTick>
 8004644:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004648:	e00f      	b.n	800466a <HAL_RCC_OscConfig+0x67e>
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004654:	f7fd fde4 	bl	8002220 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d902      	bls.n	800466a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	f000 bcc8 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
 800466a:	2302      	movs	r3, #2
 800466c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800467c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004680:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004684:	2202      	movs	r2, #2
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800468c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	fa93 f2a3 	rbit	r2, r3
 8004696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046a8:	2202      	movs	r2, #2
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	fa93 f2a3 	rbit	r2, r3
 80046ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80046c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c4:	4bb0      	ldr	r3, [pc, #704]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 80046c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80046d0:	2102      	movs	r1, #2
 80046d2:	6019      	str	r1, [r3, #0]
 80046d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f1a3 	rbit	r1, r3
 80046e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80046ea:	6019      	str	r1, [r3, #0]
  return result;
 80046ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2101      	movs	r1, #1
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0a0      	beq.n	8004654 <HAL_RCC_OscConfig+0x668>
 8004712:	e08d      	b.n	8004830 <HAL_RCC_OscConfig+0x844>
 8004714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004718:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004724:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	fa93 f2a3 	rbit	r2, r3
 800472e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004732:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004736:	601a      	str	r2, [r3, #0]
  return result;
 8004738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004740:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	4b90      	ldr	r3, [pc, #576]	@ (800498c <HAL_RCC_OscConfig+0x9a0>)
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	461a      	mov	r2, r3
 8004752:	2300      	movs	r3, #0
 8004754:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004756:	f7fd fd63 	bl	8002220 <HAL_GetTick>
 800475a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004760:	f7fd fd5e 	bl	8002220 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d902      	bls.n	8004776 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	f000 bc42 	b.w	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800477a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800477e:	2202      	movs	r2, #2
 8004780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004786:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	fa93 f2a3 	rbit	r2, r3
 8004790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004794:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047a2:	2202      	movs	r2, #2
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	fa93 f2a3 	rbit	r2, r3
 80047b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80047c6:	2202      	movs	r2, #2
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	fa93 f2a3 	rbit	r2, r3
 80047d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80047e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e2:	4b69      	ldr	r3, [pc, #420]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 80047e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80047ee:	2102      	movs	r1, #2
 80047f0:	6019      	str	r1, [r3, #0]
 80047f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	fa93 f1a3 	rbit	r1, r3
 8004800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004804:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004808:	6019      	str	r1, [r3, #0]
  return result;
 800480a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2101      	movs	r1, #1
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d197      	bne.n	8004760 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004834:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 819e 	beq.w	8004b82 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484c:	4b4e      	ldr	r3, [pc, #312]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d116      	bne.n	8004886 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b4b      	ldr	r3, [pc, #300]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4a4a      	ldr	r2, [pc, #296]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004862:	61d3      	str	r3, [r2, #28]
 8004864:	4b48      	ldr	r3, [pc, #288]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800486c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004870:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800487e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004886:	4b42      	ldr	r3, [pc, #264]	@ (8004990 <HAL_RCC_OscConfig+0x9a4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11a      	bne.n	80048c8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004892:	4b3f      	ldr	r3, [pc, #252]	@ (8004990 <HAL_RCC_OscConfig+0x9a4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3e      	ldr	r2, [pc, #248]	@ (8004990 <HAL_RCC_OscConfig+0x9a4>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489e:	f7fd fcbf 	bl	8002220 <HAL_GetTick>
 80048a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a6:	e009      	b.n	80048bc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a8:	f7fd fcba 	bl	8002220 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b64      	cmp	r3, #100	@ 0x64
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e39e      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048bc:	4b34      	ldr	r3, [pc, #208]	@ (8004990 <HAL_RCC_OscConfig+0x9a4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ef      	beq.n	80048a8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x8fa>
 80048d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6213      	str	r3, [r2, #32]
 80048e4:	e035      	b.n	8004952 <HAL_RCC_OscConfig+0x966>
 80048e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x924>
 80048f6:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4a23      	ldr	r2, [pc, #140]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6213      	str	r3, [r2, #32]
 8004902:	4b21      	ldr	r3, [pc, #132]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4a20      	ldr	r2, [pc, #128]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004908:	f023 0304 	bic.w	r3, r3, #4
 800490c:	6213      	str	r3, [r2, #32]
 800490e:	e020      	b.n	8004952 <HAL_RCC_OscConfig+0x966>
 8004910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004914:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b05      	cmp	r3, #5
 800491e:	d10c      	bne.n	800493a <HAL_RCC_OscConfig+0x94e>
 8004920:	4b19      	ldr	r3, [pc, #100]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	4a18      	ldr	r2, [pc, #96]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004926:	f043 0304 	orr.w	r3, r3, #4
 800492a:	6213      	str	r3, [r2, #32]
 800492c:	4b16      	ldr	r3, [pc, #88]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	4a15      	ldr	r2, [pc, #84]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6213      	str	r3, [r2, #32]
 8004938:	e00b      	b.n	8004952 <HAL_RCC_OscConfig+0x966>
 800493a:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	6213      	str	r3, [r2, #32]
 8004946:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a0f      	ldr	r2, [pc, #60]	@ (8004988 <HAL_RCC_OscConfig+0x99c>)
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8087 	beq.w	8004a72 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004964:	f7fd fc5c 	bl	8002220 <HAL_GetTick>
 8004968:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	e012      	b.n	8004994 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fd fc57 	bl	8002220 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d908      	bls.n	8004994 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e339      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	10908120 	.word	0x10908120
 8004990:	40007000 	.word	0x40007000
 8004994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004998:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800499c:	2202      	movs	r2, #2
 800499e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	fa93 f2a3 	rbit	r2, r3
 80049ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80049c0:	2202      	movs	r2, #2
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80049da:	601a      	str	r2, [r3, #0]
  return result;
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80049e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_OscConfig+0xa10>
 80049f6:	4b98      	ldr	r3, [pc, #608]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	e013      	b.n	8004a24 <HAL_RCC_OscConfig+0xa38>
 80049fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a04:	2202      	movs	r2, #2
 8004a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	fa93 f2a3 	rbit	r2, r3
 8004a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	4b8d      	ldr	r3, [pc, #564]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a28:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	6011      	str	r1, [r2, #0]
 8004a30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	fa92 f1a2 	rbit	r1, r2
 8004a3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a42:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004a46:	6011      	str	r1, [r2, #0]
  return result;
 8004a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a4c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	fab2 f282 	clz	r2, r2
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	f002 021f 	and.w	r2, r2, #31
 8004a62:	2101      	movs	r1, #1
 8004a64:	fa01 f202 	lsl.w	r2, r1, r2
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f43f af7f 	beq.w	800496e <HAL_RCC_OscConfig+0x982>
 8004a70:	e07d      	b.n	8004b6e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7fd fbd5 	bl	8002220 <HAL_GetTick>
 8004a76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fd fbd0 	bl	8002220 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e2b2      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a98:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	fa93 f2a3 	rbit	r2, r3
 8004aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004abc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	fa93 f2a3 	rbit	r2, r3
 8004ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004ada:	601a      	str	r2, [r3, #0]
  return result;
 8004adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004ae4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_RCC_OscConfig+0xb10>
 8004af6:	4b58      	ldr	r3, [pc, #352]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	e013      	b.n	8004b24 <HAL_RCC_OscConfig+0xb38>
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b04:	2202      	movs	r2, #2
 8004b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	fa93 f2a3 	rbit	r2, r3
 8004b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	4b4d      	ldr	r3, [pc, #308]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b28:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	6011      	str	r1, [r2, #0]
 8004b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b34:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	fa92 f1a2 	rbit	r1, r2
 8004b3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b42:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004b46:	6011      	str	r1, [r2, #0]
  return result;
 8004b48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b4c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	fab2 f282 	clz	r2, r2
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	f002 021f 	and.w	r2, r2, #31
 8004b62:	2101      	movs	r1, #1
 8004b64:	fa01 f202 	lsl.w	r2, r1, r2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d186      	bne.n	8004a7c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b6e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b76:	4b38      	ldr	r3, [pc, #224]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	4a37      	ldr	r2, [pc, #220]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8232 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b94:	4b30      	ldr	r3, [pc, #192]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	f000 8201 	beq.w	8004fa4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	f040 8157 	bne.w	8004e62 <HAL_RCC_OscConfig+0xe76>
 8004bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004bbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004bd8:	601a      	str	r2, [r3, #0]
  return result;
 8004bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bde:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004be2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004bee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fb11 	bl	8002220 <HAL_GetTick>
 8004bfe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c02:	e009      	b.n	8004c18 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd fb0c 	bl	8002220 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1f0      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004c20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c2a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	fa93 f2a3 	rbit	r2, r3
 8004c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c38:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004c3c:	601a      	str	r2, [r3, #0]
  return result;
 8004c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c42:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c48:	fab3 f383 	clz	r3, r3
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c50:	d804      	bhi.n	8004c5c <HAL_RCC_OscConfig+0xc70>
 8004c52:	4b01      	ldr	r3, [pc, #4]	@ (8004c58 <HAL_RCC_OscConfig+0xc6c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	e029      	b.n	8004cac <HAL_RCC_OscConfig+0xcc0>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c60:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004c64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	fa93 f2a3 	rbit	r2, r3
 8004c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c86:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004c8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c94:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	fa93 f2a3 	rbit	r2, r3
 8004c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	4bc3      	ldr	r3, [pc, #780]	@ (8004fb8 <HAL_RCC_OscConfig+0xfcc>)
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cb0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004cb4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cbe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	fa92 f1a2 	rbit	r1, r2
 8004cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ccc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004cd0:	6011      	str	r1, [r2, #0]
  return result;
 8004cd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cd6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	fab2 f282 	clz	r2, r2
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	f042 0220 	orr.w	r2, r2, #32
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	f002 021f 	and.w	r2, r2, #31
 8004cec:	2101      	movs	r1, #1
 8004cee:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d185      	bne.n	8004c04 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf8:	4baf      	ldr	r3, [pc, #700]	@ (8004fb8 <HAL_RCC_OscConfig+0xfcc>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	49a7      	ldr	r1, [pc, #668]	@ (8004fb8 <HAL_RCC_OscConfig+0xfcc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
 8004d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d24:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004d28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d32:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	fa93 f2a3 	rbit	r2, r3
 8004d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d40:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004d44:	601a      	str	r2, [r3, #0]
  return result;
 8004d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004d4e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	461a      	mov	r2, r3
 8004d62:	2301      	movs	r3, #1
 8004d64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fd fa5b 	bl	8002220 <HAL_GetTick>
 8004d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d6e:	e009      	b.n	8004d84 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fd fa56 	bl	8002220 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e13a      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d88:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004d8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d96:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	fa93 f2a3 	rbit	r2, r3
 8004da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004da8:	601a      	str	r2, [r3, #0]
  return result;
 8004daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004db2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004db4:	fab3 f383 	clz	r3, r3
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dbc:	d802      	bhi.n	8004dc4 <HAL_RCC_OscConfig+0xdd8>
 8004dbe:	4b7e      	ldr	r3, [pc, #504]	@ (8004fb8 <HAL_RCC_OscConfig+0xfcc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	e027      	b.n	8004e14 <HAL_RCC_OscConfig+0xe28>
 8004dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004dcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	fa93 f2a3 	rbit	r2, r3
 8004de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dee:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004df2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	fa93 f2a3 	rbit	r2, r3
 8004e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e0a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	4b69      	ldr	r3, [pc, #420]	@ (8004fb8 <HAL_RCC_OscConfig+0xfcc>)
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e18:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004e1c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e20:	6011      	str	r1, [r2, #0]
 8004e22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e26:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	fa92 f1a2 	rbit	r1, r2
 8004e30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e34:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004e38:	6011      	str	r1, [r2, #0]
  return result;
 8004e3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e3e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	fab2 f282 	clz	r2, r2
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	f042 0220 	orr.w	r2, r2, #32
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	f002 021f 	and.w	r2, r2, #31
 8004e54:	2101      	movs	r1, #1
 8004e56:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d087      	beq.n	8004d70 <HAL_RCC_OscConfig+0xd84>
 8004e60:	e0ca      	b.n	8004ff8 <HAL_RCC_OscConfig+0x100c>
 8004e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e66:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e74:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	fa93 f2a3 	rbit	r2, r3
 8004e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e82:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004e86:	601a      	str	r2, [r3, #0]
  return result;
 8004e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e8c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004e90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004e9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fd f9ba 	bl	8002220 <HAL_GetTick>
 8004eac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb0:	e009      	b.n	8004ec6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fd f9b5 	bl	8002220 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e099      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004ece:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	fa93 f2a3 	rbit	r2, r3
 8004ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004eea:	601a      	str	r2, [r3, #0]
  return result;
 8004eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b3f      	cmp	r3, #63	@ 0x3f
 8004efe:	d802      	bhi.n	8004f06 <HAL_RCC_OscConfig+0xf1a>
 8004f00:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb8 <HAL_RCC_OscConfig+0xfcc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	e027      	b.n	8004f56 <HAL_RCC_OscConfig+0xf6a>
 8004f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004f0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f18:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	fa93 f2a3 	rbit	r2, r3
 8004f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f26:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f30:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004f34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	fa93 f2a3 	rbit	r2, r3
 8004f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <HAL_RCC_OscConfig+0xfcc>)
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f5a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004f5e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f62:	6011      	str	r1, [r2, #0]
 8004f64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f68:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	fa92 f1a2 	rbit	r1, r2
 8004f72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f76:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004f7a:	6011      	str	r1, [r2, #0]
  return result;
 8004f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f80:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	fab2 f282 	clz	r2, r2
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	f042 0220 	orr.w	r2, r2, #32
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	f002 021f 	and.w	r2, r2, #31
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d187      	bne.n	8004eb2 <HAL_RCC_OscConfig+0xec6>
 8004fa2:	e029      	b.n	8004ff8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d103      	bne.n	8004fbc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e020      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
 8004fb8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fbc:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <HAL_RCC_OscConfig+0x1018>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fc4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004fc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004fdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004fe0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b09e      	sub	sp, #120	@ 0x78
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e154      	b.n	80052ca <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b89      	ldr	r3, [pc, #548]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d910      	bls.n	8005050 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b86      	ldr	r3, [pc, #536]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0207 	bic.w	r2, r3, #7
 8005036:	4984      	ldr	r1, [pc, #528]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b82      	ldr	r3, [pc, #520]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e13c      	b.n	80052ca <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505c:	4b7b      	ldr	r3, [pc, #492]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4978      	ldr	r1, [pc, #480]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80cd 	beq.w	8005216 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d137      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xec>
 8005084:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005088:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800508c:	fa93 f3a3 	rbit	r3, r3
 8005090:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005094:	fab3 f383 	clz	r3, r3
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b3f      	cmp	r3, #63	@ 0x3f
 800509c:	d802      	bhi.n	80050a4 <HAL_RCC_ClockConfig+0x9c>
 800509e:	4b6b      	ldr	r3, [pc, #428]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	e00f      	b.n	80050c4 <HAL_RCC_ClockConfig+0xbc>
 80050a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80050b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050c0:	4b62      	ldr	r3, [pc, #392]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80050c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050cc:	fa92 f2a2 	rbit	r2, r2
 80050d0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80050d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050d4:	fab2 f282 	clz	r2, r2
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	f042 0220 	orr.w	r2, r2, #32
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	f002 021f 	and.w	r2, r2, #31
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d171      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0ea      	b.n	80052ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d137      	bne.n	800516c <HAL_RCC_ClockConfig+0x164>
 80050fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005100:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005104:	fa93 f3a3 	rbit	r3, r3
 8005108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800510a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510c:	fab3 f383 	clz	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b3f      	cmp	r3, #63	@ 0x3f
 8005114:	d802      	bhi.n	800511c <HAL_RCC_ClockConfig+0x114>
 8005116:	4b4d      	ldr	r3, [pc, #308]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e00f      	b.n	800513c <HAL_RCC_ClockConfig+0x134>
 800511c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	647b      	str	r3, [r7, #68]	@ 0x44
 800512a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800512e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005138:	4b44      	ldr	r3, [pc, #272]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005140:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005142:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005144:	fa92 f2a2 	rbit	r2, r2
 8005148:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800514a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800514c:	fab2 f282 	clz	r2, r2
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	f042 0220 	orr.w	r2, r2, #32
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	f002 021f 	and.w	r2, r2, #31
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f202 	lsl.w	r2, r1, r2
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d135      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0ae      	b.n	80052ca <HAL_RCC_ClockConfig+0x2c2>
 800516c:	2302      	movs	r3, #2
 800516e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b3f      	cmp	r3, #63	@ 0x3f
 8005182:	d802      	bhi.n	800518a <HAL_RCC_ClockConfig+0x182>
 8005184:	4b31      	ldr	r3, [pc, #196]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	e00d      	b.n	80051a6 <HAL_RCC_ClockConfig+0x19e>
 800518a:	2302      	movs	r3, #2
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	fa93 f3a3 	rbit	r3, r3
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
 8005196:	2302      	movs	r3, #2
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	fa93 f3a3 	rbit	r3, r3
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	4b2a      	ldr	r3, [pc, #168]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	2202      	movs	r2, #2
 80051a8:	61ba      	str	r2, [r7, #24]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	fa92 f2a2 	rbit	r2, r2
 80051b0:	617a      	str	r2, [r7, #20]
  return result;
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	fab2 f282 	clz	r2, r2
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	f042 0220 	orr.w	r2, r2, #32
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	f002 021f 	and.w	r2, r2, #31
 80051c4:	2101      	movs	r1, #1
 80051c6:	fa01 f202 	lsl.w	r2, r1, r2
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e07a      	b.n	80052ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d4:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 0203 	bic.w	r2, r3, #3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	491a      	ldr	r1, [pc, #104]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e6:	f7fd f81b 	bl	8002220 <HAL_GetTick>
 80051ea:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ec:	e00a      	b.n	8005204 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ee:	f7fd f817 	bl	8002220 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e062      	b.n	80052ca <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005204:	4b11      	ldr	r3, [pc, #68]	@ (800524c <HAL_RCC_ClockConfig+0x244>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 020c 	and.w	r2, r3, #12
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	429a      	cmp	r2, r3
 8005214:	d1eb      	bne.n	80051ee <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005216:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d215      	bcs.n	8005250 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005224:	4b08      	ldr	r3, [pc, #32]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 0207 	bic.w	r2, r3, #7
 800522c:	4906      	ldr	r1, [pc, #24]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005234:	4b04      	ldr	r3, [pc, #16]	@ (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d006      	beq.n	8005250 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e041      	b.n	80052ca <HAL_RCC_ClockConfig+0x2c2>
 8005246:	bf00      	nop
 8005248:	40022000 	.word	0x40022000
 800524c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800525c:	4b1d      	ldr	r3, [pc, #116]	@ (80052d4 <HAL_RCC_ClockConfig+0x2cc>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	491a      	ldr	r1, [pc, #104]	@ (80052d4 <HAL_RCC_ClockConfig+0x2cc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527a:	4b16      	ldr	r3, [pc, #88]	@ (80052d4 <HAL_RCC_ClockConfig+0x2cc>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4912      	ldr	r1, [pc, #72]	@ (80052d4 <HAL_RCC_ClockConfig+0x2cc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800528e:	f000 f829 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 8005292:	4601      	mov	r1, r0
 8005294:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <HAL_RCC_ClockConfig+0x2cc>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800529c:	22f0      	movs	r2, #240	@ 0xf0
 800529e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	fa92 f2a2 	rbit	r2, r2
 80052a6:	60fa      	str	r2, [r7, #12]
  return result;
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	fab2 f282 	clz	r2, r2
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	40d3      	lsrs	r3, r2
 80052b2:	4a09      	ldr	r2, [pc, #36]	@ (80052d8 <HAL_RCC_ClockConfig+0x2d0>)
 80052b4:	5cd3      	ldrb	r3, [r2, r3]
 80052b6:	fa21 f303 	lsr.w	r3, r1, r3
 80052ba:	4a08      	ldr	r2, [pc, #32]	@ (80052dc <HAL_RCC_ClockConfig+0x2d4>)
 80052bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052be:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <HAL_RCC_ClockConfig+0x2d8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fc ff68 	bl	8002198 <HAL_InitTick>
  
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3778      	adds	r7, #120	@ 0x78
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000
 80052d8:	08008174 	.word	0x08008174
 80052dc:	20000000 	.word	0x20000000
 80052e0:	20000004 	.word	0x20000004

080052e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80052fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x94>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b04      	cmp	r3, #4
 800530c:	d002      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x30>
 800530e:	2b08      	cmp	r3, #8
 8005310:	d003      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x36>
 8005312:	e026      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005314:	4b19      	ldr	r3, [pc, #100]	@ (800537c <HAL_RCC_GetSysClockFreq+0x98>)
 8005316:	613b      	str	r3, [r7, #16]
      break;
 8005318:	e026      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	0c9b      	lsrs	r3, r3, #18
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	4a17      	ldr	r2, [pc, #92]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005324:	5cd3      	ldrb	r3, [r2, r3]
 8005326:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005328:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x94>)
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	4a14      	ldr	r2, [pc, #80]	@ (8005384 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005340:	4a0e      	ldr	r2, [pc, #56]	@ (800537c <HAL_RCC_GetSysClockFreq+0x98>)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	fbb2 f2f3 	udiv	r2, r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e004      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a0c      	ldr	r2, [pc, #48]	@ (8005388 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	613b      	str	r3, [r7, #16]
      break;
 8005360:	e002      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005362:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <HAL_RCC_GetSysClockFreq+0xa8>)
 8005364:	613b      	str	r3, [r7, #16]
      break;
 8005366:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005368:	693b      	ldr	r3, [r7, #16]
}
 800536a:	4618      	mov	r0, r3
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40021000 	.word	0x40021000
 800537c:	01e84800 	.word	0x01e84800
 8005380:	0800818c 	.word	0x0800818c
 8005384:	0800819c 	.word	0x0800819c
 8005388:	003d0900 	.word	0x003d0900
 800538c:	007a1200 	.word	0x007a1200

08005390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005394:	4b03      	ldr	r3, [pc, #12]	@ (80053a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005396:	681b      	ldr	r3, [r3, #0]
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000000 	.word	0x20000000

080053a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053ae:	f7ff ffef 	bl	8005390 <HAL_RCC_GetHCLKFreq>
 80053b2:	4601      	mov	r1, r0
 80053b4:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053bc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80053c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	fa92 f2a2 	rbit	r2, r2
 80053c8:	603a      	str	r2, [r7, #0]
  return result;
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	fab2 f282 	clz	r2, r2
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	40d3      	lsrs	r3, r2
 80053d4:	4a04      	ldr	r2, [pc, #16]	@ (80053e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	08008184 	.word	0x08008184

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80053f2:	f7ff ffcd 	bl	8005390 <HAL_RCC_GetHCLKFreq>
 80053f6:	4601      	mov	r1, r0
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005400:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005404:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	fa92 f2a2 	rbit	r2, r2
 800540c:	603a      	str	r2, [r7, #0]
  return result;
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	fab2 f282 	clz	r2, r2
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	40d3      	lsrs	r3, r2
 8005418:	4a04      	ldr	r2, [pc, #16]	@ (800542c <HAL_RCC_GetPCLK2Freq+0x40>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40021000 	.word	0x40021000
 800542c:	08008184 	.word	0x08008184

08005430 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b092      	sub	sp, #72	@ 0x48
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80cb 	beq.w	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005454:	4b85      	ldr	r3, [pc, #532]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10e      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005460:	4b82      	ldr	r3, [pc, #520]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	4a81      	ldr	r2, [pc, #516]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800546a:	61d3      	str	r3, [r2, #28]
 800546c:	4b7f      	ldr	r3, [pc, #508]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547e:	4b7c      	ldr	r3, [pc, #496]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d118      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548a:	4b79      	ldr	r3, [pc, #484]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a78      	ldr	r2, [pc, #480]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005494:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005496:	f7fc fec3 	bl	8002220 <HAL_GetTick>
 800549a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549c:	e008      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549e:	f7fc febf 	bl	8002220 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b64      	cmp	r3, #100	@ 0x64
 80054aa:	d901      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e0d9      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054bc:	4b6b      	ldr	r3, [pc, #428]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d07b      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d074      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054da:	4b64      	ldr	r3, [pc, #400]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054e8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	fa93 f3a3 	rbit	r3, r3
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80054f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054f4:	fab3 f383 	clz	r3, r3
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	461a      	mov	r2, r3
 8005504:	2301      	movs	r3, #1
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800550c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005510:	fa93 f3a3 	rbit	r3, r3
 8005514:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005518:	fab3 f383 	clz	r3, r3
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	4b54      	ldr	r3, [pc, #336]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800552c:	4a4f      	ldr	r2, [pc, #316]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800552e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005530:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d043      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fc fe70 	bl	8002220 <HAL_GetTick>
 8005540:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005542:	e00a      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005544:	f7fc fe6c 	bl	8002220 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e084      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800555a:	2302      	movs	r3, #2
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005560:	fa93 f3a3 	rbit	r3, r3
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
 8005566:	2302      	movs	r3, #2
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	fa93 f3a3 	rbit	r3, r3
 8005570:	61fb      	str	r3, [r7, #28]
  return result;
 8005572:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005574:	fab3 f383 	clz	r3, r3
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005584:	4b39      	ldr	r3, [pc, #228]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	e007      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800558a:	2302      	movs	r3, #2
 800558c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	4b35      	ldr	r3, [pc, #212]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	2202      	movs	r2, #2
 800559c:	613a      	str	r2, [r7, #16]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	fa92 f2a2 	rbit	r2, r2
 80055a4:	60fa      	str	r2, [r7, #12]
  return result;
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	fab2 f282 	clz	r2, r2
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	f002 021f 	and.w	r2, r2, #31
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f202 	lsl.w	r2, r1, r2
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0bf      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80055c4:	4b29      	ldr	r3, [pc, #164]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4926      	ldr	r1, [pc, #152]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d105      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4a22      	ldr	r2, [pc, #136]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055f6:	4b1d      	ldr	r3, [pc, #116]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	491a      	ldr	r1, [pc, #104]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005604:	4313      	orrs	r3, r2
 8005606:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005614:	4b15      	ldr	r3, [pc, #84]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	f023 0210 	bic.w	r2, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4912      	ldr	r1, [pc, #72]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005622:	4313      	orrs	r3, r2
 8005624:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005632:	4b0e      	ldr	r3, [pc, #56]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	490b      	ldr	r1, [pc, #44]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005640:	4313      	orrs	r3, r2
 8005642:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	4903      	ldr	r1, [pc, #12]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800565e:	4313      	orrs	r3, r2
 8005660:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3748      	adds	r7, #72	@ 0x48
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40021000 	.word	0x40021000
 8005670:	40007000 	.word	0x40007000
 8005674:	10908100 	.word	0x10908100

08005678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e049      	b.n	800571e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc fc5a 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 f9bc 	bl	8005a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d001      	beq.n	8005740 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e038      	b.n	80057b2 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1c      	ldr	r2, [pc, #112]	@ (80057c0 <HAL_TIM_Base_Start+0x98>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00e      	beq.n	8005770 <HAL_TIM_Base_Start+0x48>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575a:	d009      	beq.n	8005770 <HAL_TIM_Base_Start+0x48>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a18      	ldr	r2, [pc, #96]	@ (80057c4 <HAL_TIM_Base_Start+0x9c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_TIM_Base_Start+0x48>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a17      	ldr	r2, [pc, #92]	@ (80057c8 <HAL_TIM_Base_Start+0xa0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d115      	bne.n	800579c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	4b15      	ldr	r3, [pc, #84]	@ (80057cc <HAL_TIM_Base_Start+0xa4>)
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b06      	cmp	r3, #6
 8005780:	d015      	beq.n	80057ae <HAL_TIM_Base_Start+0x86>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005788:	d011      	beq.n	80057ae <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	e008      	b.n	80057ae <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e000      	b.n	80057b0 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	00010007 	.word	0x00010007

080057d0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <HAL_TIM_Base_Stop+0x38>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a1a      	ldr	r2, [r3, #32]
 80057ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_Base_Stop+0x38>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_TIM_ConfigClockSource+0x1c>
 8005836:	2302      	movs	r3, #2
 8005838:	e0b6      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x18a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005858:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800585c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005864:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005876:	d03e      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0xd8>
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587c:	f200 8087 	bhi.w	800598e <HAL_TIM_ConfigClockSource+0x170>
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005884:	f000 8086 	beq.w	8005994 <HAL_TIM_ConfigClockSource+0x176>
 8005888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588c:	d87f      	bhi.n	800598e <HAL_TIM_ConfigClockSource+0x170>
 800588e:	2b70      	cmp	r3, #112	@ 0x70
 8005890:	d01a      	beq.n	80058c8 <HAL_TIM_ConfigClockSource+0xaa>
 8005892:	2b70      	cmp	r3, #112	@ 0x70
 8005894:	d87b      	bhi.n	800598e <HAL_TIM_ConfigClockSource+0x170>
 8005896:	2b60      	cmp	r3, #96	@ 0x60
 8005898:	d050      	beq.n	800593c <HAL_TIM_ConfigClockSource+0x11e>
 800589a:	2b60      	cmp	r3, #96	@ 0x60
 800589c:	d877      	bhi.n	800598e <HAL_TIM_ConfigClockSource+0x170>
 800589e:	2b50      	cmp	r3, #80	@ 0x50
 80058a0:	d03c      	beq.n	800591c <HAL_TIM_ConfigClockSource+0xfe>
 80058a2:	2b50      	cmp	r3, #80	@ 0x50
 80058a4:	d873      	bhi.n	800598e <HAL_TIM_ConfigClockSource+0x170>
 80058a6:	2b40      	cmp	r3, #64	@ 0x40
 80058a8:	d058      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x13e>
 80058aa:	2b40      	cmp	r3, #64	@ 0x40
 80058ac:	d86f      	bhi.n	800598e <HAL_TIM_ConfigClockSource+0x170>
 80058ae:	2b30      	cmp	r3, #48	@ 0x30
 80058b0:	d064      	beq.n	800597c <HAL_TIM_ConfigClockSource+0x15e>
 80058b2:	2b30      	cmp	r3, #48	@ 0x30
 80058b4:	d86b      	bhi.n	800598e <HAL_TIM_ConfigClockSource+0x170>
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d060      	beq.n	800597c <HAL_TIM_ConfigClockSource+0x15e>
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d867      	bhi.n	800598e <HAL_TIM_ConfigClockSource+0x170>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d05c      	beq.n	800597c <HAL_TIM_ConfigClockSource+0x15e>
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d05a      	beq.n	800597c <HAL_TIM_ConfigClockSource+0x15e>
 80058c6:	e062      	b.n	800598e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058d8:	f000 fa3d 	bl	8005d56 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]
      break;
 80058f4:	e04f      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005906:	f000 fa26 	bl	8005d56 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005918:	609a      	str	r2, [r3, #8]
      break;
 800591a:	e03c      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005928:	461a      	mov	r2, r3
 800592a:	f000 f99a 	bl	8005c62 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2150      	movs	r1, #80	@ 0x50
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f9f3 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 800593a:	e02c      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005948:	461a      	mov	r2, r3
 800594a:	f000 f9b9 	bl	8005cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2160      	movs	r1, #96	@ 0x60
 8005954:	4618      	mov	r0, r3
 8005956:	f000 f9e3 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 800595a:	e01c      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005968:	461a      	mov	r2, r3
 800596a:	f000 f97a 	bl	8005c62 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2140      	movs	r1, #64	@ 0x40
 8005974:	4618      	mov	r0, r3
 8005976:	f000 f9d3 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 800597a:	e00c      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f000 f9ca 	bl	8005d20 <TIM_ITRx_SetConfig>
      break;
 800598c:	e003      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	73fb      	strb	r3, [r7, #15]
      break;
 8005992:	e000      	b.n	8005996 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005994:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e031      	b.n	8005a2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8ae 	bl	8005b3c <TIM_SlaveTimer_SetConfig>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e018      	b.n	8005a2c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a08:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a18:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a38      	ldr	r2, [pc, #224]	@ (8005b28 <TIM_Base_SetConfig+0xf4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <TIM_Base_SetConfig+0x28>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0x28>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a35      	ldr	r2, [pc, #212]	@ (8005b2c <TIM_Base_SetConfig+0xf8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d108      	bne.n	8005a6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2d      	ldr	r2, [pc, #180]	@ (8005b28 <TIM_Base_SetConfig+0xf4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <TIM_Base_SetConfig+0x6a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7c:	d00f      	beq.n	8005a9e <TIM_Base_SetConfig+0x6a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2a      	ldr	r2, [pc, #168]	@ (8005b2c <TIM_Base_SetConfig+0xf8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_Base_SetConfig+0x6a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a29      	ldr	r2, [pc, #164]	@ (8005b30 <TIM_Base_SetConfig+0xfc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_Base_SetConfig+0x6a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a28      	ldr	r2, [pc, #160]	@ (8005b34 <TIM_Base_SetConfig+0x100>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_Base_SetConfig+0x6a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a27      	ldr	r2, [pc, #156]	@ (8005b38 <TIM_Base_SetConfig+0x104>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a14      	ldr	r2, [pc, #80]	@ (8005b28 <TIM_Base_SetConfig+0xf4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_Base_SetConfig+0xc0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a14      	ldr	r2, [pc, #80]	@ (8005b30 <TIM_Base_SetConfig+0xfc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_Base_SetConfig+0xc0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a13      	ldr	r2, [pc, #76]	@ (8005b34 <TIM_Base_SetConfig+0x100>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_Base_SetConfig+0xc0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a12      	ldr	r2, [pc, #72]	@ (8005b38 <TIM_Base_SetConfig+0x104>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d103      	bne.n	8005afc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d105      	bne.n	8005b1a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f023 0201 	bic.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	611a      	str	r2, [r3, #16]
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800

08005b3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b6a:	f023 0307 	bic.w	r3, r3, #7
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b70      	cmp	r3, #112	@ 0x70
 8005b88:	d01a      	beq.n	8005bc0 <TIM_SlaveTimer_SetConfig+0x84>
 8005b8a:	2b70      	cmp	r3, #112	@ 0x70
 8005b8c:	d860      	bhi.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005b8e:	2b60      	cmp	r3, #96	@ 0x60
 8005b90:	d054      	beq.n	8005c3c <TIM_SlaveTimer_SetConfig+0x100>
 8005b92:	2b60      	cmp	r3, #96	@ 0x60
 8005b94:	d85c      	bhi.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005b96:	2b50      	cmp	r3, #80	@ 0x50
 8005b98:	d046      	beq.n	8005c28 <TIM_SlaveTimer_SetConfig+0xec>
 8005b9a:	2b50      	cmp	r3, #80	@ 0x50
 8005b9c:	d858      	bhi.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d019      	beq.n	8005bd6 <TIM_SlaveTimer_SetConfig+0x9a>
 8005ba2:	2b40      	cmp	r3, #64	@ 0x40
 8005ba4:	d854      	bhi.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005ba6:	2b30      	cmp	r3, #48	@ 0x30
 8005ba8:	d055      	beq.n	8005c56 <TIM_SlaveTimer_SetConfig+0x11a>
 8005baa:	2b30      	cmp	r3, #48	@ 0x30
 8005bac:	d850      	bhi.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d051      	beq.n	8005c56 <TIM_SlaveTimer_SetConfig+0x11a>
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d84c      	bhi.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d04d      	beq.n	8005c56 <TIM_SlaveTimer_SetConfig+0x11a>
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d04b      	beq.n	8005c56 <TIM_SlaveTimer_SetConfig+0x11a>
 8005bbe:	e047      	b.n	8005c50 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005bd0:	f000 f8c1 	bl	8005d56 <TIM_ETR_SetConfig>
      break;
 8005bd4:	e040      	b.n	8005c58 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d101      	bne.n	8005be2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e03b      	b.n	8005c5a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c08:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	621a      	str	r2, [r3, #32]
      break;
 8005c26:	e017      	b.n	8005c58 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c34:	461a      	mov	r2, r3
 8005c36:	f000 f814 	bl	8005c62 <TIM_TI1_ConfigInputStage>
      break;
 8005c3a:	e00d      	b.n	8005c58 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f000 f839 	bl	8005cc0 <TIM_TI2_ConfigInputStage>
      break;
 8005c4e:	e003      	b.n	8005c58 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	75fb      	strb	r3, [r7, #23]
      break;
 8005c54:	e000      	b.n	8005c58 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005c56:	bf00      	nop
  }

  return status;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b087      	sub	sp, #28
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0201 	bic.w	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 030a 	bic.w	r3, r3, #10
 8005c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0210 	bic.w	r2, r3, #16
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	031b      	lsls	r3, r3, #12
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f043 0307 	orr.w	r3, r3, #7
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	609a      	str	r2, [r3, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b087      	sub	sp, #28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	021a      	lsls	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	609a      	str	r2, [r3, #8]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e054      	b.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a24      	ldr	r2, [pc, #144]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d108      	bne.n	8005dec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005de0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a17      	ldr	r2, [pc, #92]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e18:	d009      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a13      	ldr	r2, [pc, #76]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a11      	ldr	r2, [pc, #68]	@ (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10c      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40014000 	.word	0x40014000

08005e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e040      	b.n	8005f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fc f890 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2224      	movs	r2, #36	@ 0x24
 8005ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fd3c 	bl	8006938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fc03 	bl	80066cc <UART_SetConfig>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e01b      	b.n	8005f08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fdbb 	bl	8006a7c <UART_CheckIdleState>
 8005f06:	4603      	mov	r3, r0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	@ 0x28
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d177      	bne.n	8006018 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_Transmit+0x24>
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e070      	b.n	800601a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2221      	movs	r2, #33	@ 0x21
 8005f44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f46:	f7fc f96b 	bl	8002220 <HAL_GetTick>
 8005f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f64:	d108      	bne.n	8005f78 <HAL_UART_Transmit+0x68>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	e003      	b.n	8005f80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f80:	e02f      	b.n	8005fe2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2180      	movs	r1, #128	@ 0x80
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fe1d 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e03b      	b.n	800601a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10b      	bne.n	8005fc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	881a      	ldrh	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb4:	b292      	uxth	r2, r2
 8005fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	3302      	adds	r3, #2
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e007      	b.n	8005fd0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1c9      	bne.n	8005f82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2140      	movs	r1, #64	@ 0x40
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fde7 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e005      	b.n	800601a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	e000      	b.n	800601a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006018:	2302      	movs	r3, #2
  }
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b08a      	sub	sp, #40	@ 0x28
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	4613      	mov	r3, r2
 800602e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006036:	2b20      	cmp	r3, #32
 8006038:	d132      	bne.n	80060a0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_UART_Receive_IT+0x24>
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e02b      	b.n	80060a2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	613b      	str	r3, [r7, #16]
   return(result);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	61bb      	str	r3, [r7, #24]
   return(result);
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e6      	bne.n	800605e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	461a      	mov	r2, r3
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fe06 	bl	8006ca8 <UART_Start_Receive_IT>
 800609c:	4603      	mov	r3, r0
 800609e:	e000      	b.n	80060a2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3728      	adds	r7, #40	@ 0x28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b0ba      	sub	sp, #232	@ 0xe8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80060d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80060da:	4013      	ands	r3, r2
 80060dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80060e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d115      	bne.n	8006114 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00f      	beq.n	8006114 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 82ab 	beq.w	8006660 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
      }
      return;
 8006112:	e2a5      	b.n	8006660 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8117 	beq.w	800634c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800611e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800612a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800612e:	4b85      	ldr	r3, [pc, #532]	@ (8006344 <HAL_UART_IRQHandler+0x298>)
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 810a 	beq.w	800634c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d011      	beq.n	8006168 <HAL_UART_IRQHandler+0xbc>
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615e:	f043 0201 	orr.w	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d011      	beq.n	8006198 <HAL_UART_IRQHandler+0xec>
 8006174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2202      	movs	r2, #2
 8006186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800618e:	f043 0204 	orr.w	r2, r3, #4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d011      	beq.n	80061c8 <HAL_UART_IRQHandler+0x11c>
 80061a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2204      	movs	r2, #4
 80061b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061be:	f043 0202 	orr.w	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d017      	beq.n	8006204 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2208      	movs	r2, #8
 80061f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061fa:	f043 0208 	orr.w	r2, r3, #8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800620c:	2b00      	cmp	r3, #0
 800620e:	d012      	beq.n	8006236 <HAL_UART_IRQHandler+0x18a>
 8006210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00c      	beq.n	8006236 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800622c:	f043 0220 	orr.w	r2, r3, #32
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8211 	beq.w	8006664 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00d      	beq.n	800626a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800624e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006270:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627e:	2b40      	cmp	r3, #64	@ 0x40
 8006280:	d005      	beq.n	800628e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006286:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800628a:	2b00      	cmp	r3, #0
 800628c:	d04f      	beq.n	800632e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fdd0 	bl	8006e34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b40      	cmp	r3, #64	@ 0x40
 80062a0:	d141      	bne.n	8006326 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1d9      	bne.n	80062a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d013      	beq.n	800631e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fa:	4a13      	ldr	r2, [pc, #76]	@ (8006348 <HAL_UART_IRQHandler+0x29c>)
 80062fc:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006302:	4618      	mov	r0, r3
 8006304:	f7fd fbd0 	bl	8003aa8 <HAL_DMA_Abort_IT>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	e00f      	b.n	800633e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9be 	bl	80066a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006324:	e00b      	b.n	800633e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f9ba 	bl	80066a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632c:	e007      	b.n	800633e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f9b6 	bl	80066a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800633c:	e192      	b.n	8006664 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633e:	bf00      	nop
    return;
 8006340:	e190      	b.n	8006664 <HAL_UART_IRQHandler+0x5b8>
 8006342:	bf00      	nop
 8006344:	04000120 	.word	0x04000120
 8006348:	08006efd 	.word	0x08006efd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006350:	2b01      	cmp	r3, #1
 8006352:	f040 814b 	bne.w	80065ec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8144 	beq.w	80065ec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 813d 	beq.w	80065ec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2210      	movs	r2, #16
 8006378:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006384:	2b40      	cmp	r3, #64	@ 0x40
 8006386:	f040 80b5 	bne.w	80064f4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006396:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8164 	beq.w	8006668 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f080 815c 	bcs.w	8006668 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	f000 8086 	beq.w	80064d2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063f4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1da      	bne.n	80063c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006422:	f023 0301 	bic.w	r3, r3, #1
 8006426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3308      	adds	r3, #8
 8006430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006434:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006438:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800643c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e1      	bne.n	8006410 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800645c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800645e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006470:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006472:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006476:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800647e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e3      	bne.n	800644c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064a2:	f023 0310 	bic.w	r3, r3, #16
 80064a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e4      	bne.n	8006492 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fd faad 	bl	8003a2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f8e1 	bl	80066b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064f2:	e0b9      	b.n	8006668 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006500:	b29b      	uxth	r3, r3
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80ab 	beq.w	800666c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006516:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80a6 	beq.w	800666c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800652e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006542:	647b      	str	r3, [r7, #68]	@ 0x44
 8006544:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e4      	bne.n	8006520 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	623b      	str	r3, [r7, #32]
   return(result);
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800657a:	633a      	str	r2, [r7, #48]	@ 0x30
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e3      	bne.n	8006556 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	69b9      	ldr	r1, [r7, #24]
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	617b      	str	r3, [r7, #20]
   return(result);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e4      	bne.n	80065a2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f865 	bl	80066b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065ea:	e03f      	b.n	800666c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <HAL_UART_IRQHandler+0x56a>
 80065f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800660c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fe5c 	bl	80072cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006614:	e02d      	b.n	8006672 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00e      	beq.n	8006640 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01c      	beq.n	8006670 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
    }
    return;
 800663e:	e017      	b.n	8006670 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d012      	beq.n	8006672 <HAL_UART_IRQHandler+0x5c6>
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00c      	beq.n	8006672 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fc65 	bl	8006f28 <UART_EndTransmit_IT>
    return;
 800665e:	e008      	b.n	8006672 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006660:	bf00      	nop
 8006662:	e006      	b.n	8006672 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006664:	bf00      	nop
 8006666:	e004      	b.n	8006672 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006668:	bf00      	nop
 800666a:	e002      	b.n	8006672 <HAL_UART_IRQHandler+0x5c6>
      return;
 800666c:	bf00      	nop
 800666e:	e000      	b.n	8006672 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006670:	bf00      	nop
  }

}
 8006672:	37e8      	adds	r7, #232	@ 0xe8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006920 <UART_SetConfig+0x254>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	6979      	ldr	r1, [r7, #20]
 8006700:	430b      	orrs	r3, r1
 8006702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	430a      	orrs	r2, r1
 800673c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a78      	ldr	r2, [pc, #480]	@ (8006924 <UART_SetConfig+0x258>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d120      	bne.n	800678a <UART_SetConfig+0xbe>
 8006748:	4b77      	ldr	r3, [pc, #476]	@ (8006928 <UART_SetConfig+0x25c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	2b03      	cmp	r3, #3
 8006752:	d817      	bhi.n	8006784 <UART_SetConfig+0xb8>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x90>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006779 	.word	0x08006779
 8006764:	0800677f 	.word	0x0800677f
 8006768:	08006773 	.word	0x08006773
 800676c:	2300      	movs	r3, #0
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e01d      	b.n	80067ae <UART_SetConfig+0xe2>
 8006772:	2302      	movs	r3, #2
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e01a      	b.n	80067ae <UART_SetConfig+0xe2>
 8006778:	2304      	movs	r3, #4
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e017      	b.n	80067ae <UART_SetConfig+0xe2>
 800677e:	2308      	movs	r3, #8
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e014      	b.n	80067ae <UART_SetConfig+0xe2>
 8006784:	2310      	movs	r3, #16
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e011      	b.n	80067ae <UART_SetConfig+0xe2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a67      	ldr	r2, [pc, #412]	@ (800692c <UART_SetConfig+0x260>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d102      	bne.n	800679a <UART_SetConfig+0xce>
 8006794:	2300      	movs	r3, #0
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e009      	b.n	80067ae <UART_SetConfig+0xe2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a64      	ldr	r2, [pc, #400]	@ (8006930 <UART_SetConfig+0x264>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d102      	bne.n	80067aa <UART_SetConfig+0xde>
 80067a4:	2300      	movs	r3, #0
 80067a6:	77fb      	strb	r3, [r7, #31]
 80067a8:	e001      	b.n	80067ae <UART_SetConfig+0xe2>
 80067aa:	2310      	movs	r3, #16
 80067ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067b6:	d15a      	bne.n	800686e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80067b8:	7ffb      	ldrb	r3, [r7, #31]
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d827      	bhi.n	800680e <UART_SetConfig+0x142>
 80067be:	a201      	add	r2, pc, #4	@ (adr r2, 80067c4 <UART_SetConfig+0xf8>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067e9 	.word	0x080067e9
 80067c8:	080067f1 	.word	0x080067f1
 80067cc:	080067f9 	.word	0x080067f9
 80067d0:	0800680f 	.word	0x0800680f
 80067d4:	080067ff 	.word	0x080067ff
 80067d8:	0800680f 	.word	0x0800680f
 80067dc:	0800680f 	.word	0x0800680f
 80067e0:	0800680f 	.word	0x0800680f
 80067e4:	08006807 	.word	0x08006807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e8:	f7fe fdde 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 80067ec:	61b8      	str	r0, [r7, #24]
        break;
 80067ee:	e013      	b.n	8006818 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f0:	f7fe fdfc 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 80067f4:	61b8      	str	r0, [r7, #24]
        break;
 80067f6:	e00f      	b.n	8006818 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f8:	4b4e      	ldr	r3, [pc, #312]	@ (8006934 <UART_SetConfig+0x268>)
 80067fa:	61bb      	str	r3, [r7, #24]
        break;
 80067fc:	e00c      	b.n	8006818 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067fe:	f7fe fd71 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 8006802:	61b8      	str	r0, [r7, #24]
        break;
 8006804:	e008      	b.n	8006818 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680a:	61bb      	str	r3, [r7, #24]
        break;
 800680c:	e004      	b.n	8006818 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	77bb      	strb	r3, [r7, #30]
        break;
 8006816:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d074      	beq.n	8006908 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	005a      	lsls	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	441a      	add	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b0f      	cmp	r3, #15
 8006838:	d916      	bls.n	8006868 <UART_SetConfig+0x19c>
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006840:	d212      	bcs.n	8006868 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f023 030f 	bic.w	r3, r3, #15
 800684a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	b29b      	uxth	r3, r3
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	b29a      	uxth	r2, r3
 8006858:	89fb      	ldrh	r3, [r7, #14]
 800685a:	4313      	orrs	r3, r2
 800685c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	89fa      	ldrh	r2, [r7, #14]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	e04f      	b.n	8006908 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	77bb      	strb	r3, [r7, #30]
 800686c:	e04c      	b.n	8006908 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800686e:	7ffb      	ldrb	r3, [r7, #31]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d828      	bhi.n	80068c6 <UART_SetConfig+0x1fa>
 8006874:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <UART_SetConfig+0x1b0>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068a9 	.word	0x080068a9
 8006884:	080068b1 	.word	0x080068b1
 8006888:	080068c7 	.word	0x080068c7
 800688c:	080068b7 	.word	0x080068b7
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068c7 	.word	0x080068c7
 8006898:	080068c7 	.word	0x080068c7
 800689c:	080068bf 	.word	0x080068bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fe fd82 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 80068a4:	61b8      	str	r0, [r7, #24]
        break;
 80068a6:	e013      	b.n	80068d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fe fda0 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 80068ac:	61b8      	str	r0, [r7, #24]
        break;
 80068ae:	e00f      	b.n	80068d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b0:	4b20      	ldr	r3, [pc, #128]	@ (8006934 <UART_SetConfig+0x268>)
 80068b2:	61bb      	str	r3, [r7, #24]
        break;
 80068b4:	e00c      	b.n	80068d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b6:	f7fe fd15 	bl	80052e4 <HAL_RCC_GetSysClockFreq>
 80068ba:	61b8      	str	r0, [r7, #24]
        break;
 80068bc:	e008      	b.n	80068d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c2:	61bb      	str	r3, [r7, #24]
        break;
 80068c4:	e004      	b.n	80068d0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	77bb      	strb	r3, [r7, #30]
        break;
 80068ce:	bf00      	nop
    }

    if (pclk != 0U)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	085a      	lsrs	r2, r3, #1
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	441a      	add	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d909      	bls.n	8006904 <UART_SetConfig+0x238>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f6:	d205      	bcs.n	8006904 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	e001      	b.n	8006908 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006914:	7fbb      	ldrb	r3, [r7, #30]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	efff69f3 	.word	0xefff69f3
 8006924:	40013800 	.word	0x40013800
 8006928:	40021000 	.word	0x40021000
 800692c:	40004400 	.word	0x40004400
 8006930:	40004800 	.word	0x40004800
 8006934:	007a1200 	.word	0x007a1200

08006938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01a      	beq.n	8006a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a36:	d10a      	bne.n	8006a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b098      	sub	sp, #96	@ 0x60
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a8c:	f7fb fbc8 	bl	8002220 <HAL_GetTick>
 8006a90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d12e      	bne.n	8006afe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f88c 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d021      	beq.n	8006afe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ada:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e062      	b.n	8006bc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d149      	bne.n	8006ba0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b14:	2200      	movs	r2, #0
 8006b16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f856 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d03c      	beq.n	8006ba0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	623b      	str	r3, [r7, #32]
   return(result);
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b78:	61fa      	str	r2, [r7, #28]
 8006b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e011      	b.n	8006bc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3758      	adds	r7, #88	@ 0x58
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bdc:	e04f      	b.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d04b      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be6:	f7fb fb1b 	bl	8002220 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e04e      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d037      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b80      	cmp	r3, #128	@ 0x80
 8006c12:	d034      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b40      	cmp	r3, #64	@ 0x40
 8006c18:	d031      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d110      	bne.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f8ff 	bl	8006e34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2208      	movs	r2, #8
 8006c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e029      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c58:	d111      	bne.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f8e5 	bl	8006e34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e00f      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4013      	ands	r3, r2
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	bf0c      	ite	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	2300      	movne	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d0a0      	beq.n	8006bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b097      	sub	sp, #92	@ 0x5c
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cda:	d10e      	bne.n	8006cfa <UART_Start_Receive_IT+0x52>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <UART_Start_Receive_IT+0x48>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006cea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cee:	e02d      	b.n	8006d4c <UART_Start_Receive_IT+0xa4>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	22ff      	movs	r2, #255	@ 0xff
 8006cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cf8:	e028      	b.n	8006d4c <UART_Start_Receive_IT+0xa4>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <UART_Start_Receive_IT+0x76>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <UART_Start_Receive_IT+0x6c>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	22ff      	movs	r2, #255	@ 0xff
 8006d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d12:	e01b      	b.n	8006d4c <UART_Start_Receive_IT+0xa4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	227f      	movs	r2, #127	@ 0x7f
 8006d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d1c:	e016      	b.n	8006d4c <UART_Start_Receive_IT+0xa4>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d26:	d10d      	bne.n	8006d44 <UART_Start_Receive_IT+0x9c>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <UART_Start_Receive_IT+0x92>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	227f      	movs	r2, #127	@ 0x7f
 8006d34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d38:	e008      	b.n	8006d4c <UART_Start_Receive_IT+0xa4>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	223f      	movs	r2, #63	@ 0x3f
 8006d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d42:	e003      	b.n	8006d4c <UART_Start_Receive_IT+0xa4>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2222      	movs	r2, #34	@ 0x22
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	f043 0301 	orr.w	r3, r3, #1
 8006d72:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e5      	bne.n	8006d5c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d98:	d107      	bne.n	8006daa <UART_Start_Receive_IT+0x102>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4a21      	ldr	r2, [pc, #132]	@ (8006e2c <UART_Start_Receive_IT+0x184>)
 8006da6:	669a      	str	r2, [r3, #104]	@ 0x68
 8006da8:	e002      	b.n	8006db0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4a20      	ldr	r2, [pc, #128]	@ (8006e30 <UART_Start_Receive_IT+0x188>)
 8006dae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d019      	beq.n	8006dec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e6      	bne.n	8006db8 <UART_Start_Receive_IT+0x110>
 8006dea:	e018      	b.n	8006e1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f043 0320 	orr.w	r3, r3, #32
 8006e00:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0a:	623b      	str	r3, [r7, #32]
 8006e0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	69f9      	ldr	r1, [r7, #28]
 8006e10:	6a3a      	ldr	r2, [r7, #32]
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e6      	bne.n	8006dec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	375c      	adds	r7, #92	@ 0x5c
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	08007125 	.word	0x08007125
 8006e30:	08006f7d 	.word	0x08006f7d

08006e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b095      	sub	sp, #84	@ 0x54
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e6      	bne.n	8006e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d118      	bne.n	8006edc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f023 0310 	bic.w	r3, r3, #16
 8006ebe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6979      	ldr	r1, [r7, #20]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e6      	bne.n	8006eaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ef0:	bf00      	nop
 8006ef2:	3754      	adds	r7, #84	@ 0x54
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fbc0 	bl	80066a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6979      	ldr	r1, [r7, #20]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e6      	bne.n	8006f30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff fb82 	bl	8006678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f74:	bf00      	nop
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b09c      	sub	sp, #112	@ 0x70
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f94:	2b22      	cmp	r3, #34	@ 0x22
 8006f96:	f040 80b9 	bne.w	800710c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006fa0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fa4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006fa8:	b2d9      	uxtb	r1, r3
 8006faa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb4:	400a      	ands	r2, r1
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f040 809c 	bne.w	800711c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007002:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007004:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007008:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e6      	bne.n	8006fe4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	667b      	str	r3, [r7, #100]	@ 0x64
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007036:	647a      	str	r2, [r7, #68]	@ 0x44
 8007038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800703c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d018      	beq.n	800709e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	623b      	str	r3, [r7, #32]
   return(result);
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007080:	663b      	str	r3, [r7, #96]	@ 0x60
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800708a:	633b      	str	r3, [r7, #48]	@ 0x30
 800708c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e6      	bne.n	800706c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d12e      	bne.n	8007104 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f023 0310 	bic.w	r3, r3, #16
 80070c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	69b9      	ldr	r1, [r7, #24]
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	617b      	str	r3, [r7, #20]
   return(result);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e6      	bne.n	80070ac <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d103      	bne.n	80070f4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2210      	movs	r2, #16
 80070f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff fad9 	bl	80066b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007102:	e00b      	b.n	800711c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fac1 	bl	800668c <HAL_UART_RxCpltCallback>
}
 800710a:	e007      	b.n	800711c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0208 	orr.w	r2, r2, #8
 800711a:	619a      	str	r2, [r3, #24]
}
 800711c:	bf00      	nop
 800711e:	3770      	adds	r7, #112	@ 0x70
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b09c      	sub	sp, #112	@ 0x70
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007132:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800713c:	2b22      	cmp	r3, #34	@ 0x22
 800713e:	f040 80b9 	bne.w	80072b4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007148:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007150:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007152:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007156:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800715a:	4013      	ands	r3, r2
 800715c:	b29a      	uxth	r2, r3
 800715e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007160:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	1c9a      	adds	r2, r3, #2
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 809c 	bne.w	80072c4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800719a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800719c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80071ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80071b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80071b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071de:	643a      	str	r2, [r7, #64]	@ 0x40
 80071e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d018      	beq.n	8007246 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	61fb      	str	r3, [r7, #28]
   return(result);
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007234:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e6      	bne.n	8007214 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800724a:	2b01      	cmp	r3, #1
 800724c:	d12e      	bne.n	80072ac <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	60bb      	str	r3, [r7, #8]
   return(result);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f023 0310 	bic.w	r3, r3, #16
 8007268:	65bb      	str	r3, [r7, #88]	@ 0x58
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	613b      	str	r3, [r7, #16]
   return(result);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e6      	bne.n	8007254 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b10      	cmp	r3, #16
 8007292:	d103      	bne.n	800729c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2210      	movs	r2, #16
 800729a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fa05 	bl	80066b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072aa:	e00b      	b.n	80072c4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff f9ed 	bl	800668c <HAL_UART_RxCpltCallback>
}
 80072b2:	e007      	b.n	80072c4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0208 	orr.w	r2, r2, #8
 80072c2:	619a      	str	r2, [r3, #24]
}
 80072c4:	bf00      	nop
 80072c6:	3770      	adds	r7, #112	@ 0x70
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <memset>:
 80072e0:	4402      	add	r2, r0
 80072e2:	4603      	mov	r3, r0
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d100      	bne.n	80072ea <memset+0xa>
 80072e8:	4770      	bx	lr
 80072ea:	f803 1b01 	strb.w	r1, [r3], #1
 80072ee:	e7f9      	b.n	80072e4 <memset+0x4>

080072f0 <__errno>:
 80072f0:	4b01      	ldr	r3, [pc, #4]	@ (80072f8 <__errno+0x8>)
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	2000000c 	.word	0x2000000c

080072fc <__libc_init_array>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007334 <__libc_init_array+0x38>)
 8007300:	4c0d      	ldr	r4, [pc, #52]	@ (8007338 <__libc_init_array+0x3c>)
 8007302:	1b64      	subs	r4, r4, r5
 8007304:	10a4      	asrs	r4, r4, #2
 8007306:	2600      	movs	r6, #0
 8007308:	42a6      	cmp	r6, r4
 800730a:	d109      	bne.n	8007320 <__libc_init_array+0x24>
 800730c:	4d0b      	ldr	r5, [pc, #44]	@ (800733c <__libc_init_array+0x40>)
 800730e:	4c0c      	ldr	r4, [pc, #48]	@ (8007340 <__libc_init_array+0x44>)
 8007310:	f000 ff24 	bl	800815c <_init>
 8007314:	1b64      	subs	r4, r4, r5
 8007316:	10a4      	asrs	r4, r4, #2
 8007318:	2600      	movs	r6, #0
 800731a:	42a6      	cmp	r6, r4
 800731c:	d105      	bne.n	800732a <__libc_init_array+0x2e>
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	f855 3b04 	ldr.w	r3, [r5], #4
 8007324:	4798      	blx	r3
 8007326:	3601      	adds	r6, #1
 8007328:	e7ee      	b.n	8007308 <__libc_init_array+0xc>
 800732a:	f855 3b04 	ldr.w	r3, [r5], #4
 800732e:	4798      	blx	r3
 8007330:	3601      	adds	r6, #1
 8007332:	e7f2      	b.n	800731a <__libc_init_array+0x1e>
 8007334:	080085b4 	.word	0x080085b4
 8007338:	080085b4 	.word	0x080085b4
 800733c:	080085b4 	.word	0x080085b4
 8007340:	080085b8 	.word	0x080085b8

08007344 <atan2f>:
 8007344:	f000 b94c 	b.w	80075e0 <__ieee754_atan2f>

08007348 <sqrtf>:
 8007348:	b508      	push	{r3, lr}
 800734a:	ed2d 8b02 	vpush	{d8}
 800734e:	eeb0 8a40 	vmov.f32	s16, s0
 8007352:	f000 f8a1 	bl	8007498 <__ieee754_sqrtf>
 8007356:	eeb4 8a48 	vcmp.f32	s16, s16
 800735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735e:	d60c      	bvs.n	800737a <sqrtf+0x32>
 8007360:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007380 <sqrtf+0x38>
 8007364:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	d505      	bpl.n	800737a <sqrtf+0x32>
 800736e:	f7ff ffbf 	bl	80072f0 <__errno>
 8007372:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007376:	2321      	movs	r3, #33	@ 0x21
 8007378:	6003      	str	r3, [r0, #0]
 800737a:	ecbd 8b02 	vpop	{d8}
 800737e:	bd08      	pop	{r3, pc}
 8007380:	00000000 	.word	0x00000000

08007384 <cosf>:
 8007384:	ee10 3a10 	vmov	r3, s0
 8007388:	b507      	push	{r0, r1, r2, lr}
 800738a:	4a1e      	ldr	r2, [pc, #120]	@ (8007404 <cosf+0x80>)
 800738c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007390:	4293      	cmp	r3, r2
 8007392:	d806      	bhi.n	80073a2 <cosf+0x1e>
 8007394:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8007408 <cosf+0x84>
 8007398:	b003      	add	sp, #12
 800739a:	f85d eb04 	ldr.w	lr, [sp], #4
 800739e:	f000 b87f 	b.w	80074a0 <__kernel_cosf>
 80073a2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80073a6:	d304      	bcc.n	80073b2 <cosf+0x2e>
 80073a8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80073ac:	b003      	add	sp, #12
 80073ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80073b2:	4668      	mov	r0, sp
 80073b4:	f000 f9b4 	bl	8007720 <__ieee754_rem_pio2f>
 80073b8:	f000 0003 	and.w	r0, r0, #3
 80073bc:	2801      	cmp	r0, #1
 80073be:	d009      	beq.n	80073d4 <cosf+0x50>
 80073c0:	2802      	cmp	r0, #2
 80073c2:	d010      	beq.n	80073e6 <cosf+0x62>
 80073c4:	b9b0      	cbnz	r0, 80073f4 <cosf+0x70>
 80073c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80073ca:	ed9d 0a00 	vldr	s0, [sp]
 80073ce:	f000 f867 	bl	80074a0 <__kernel_cosf>
 80073d2:	e7eb      	b.n	80073ac <cosf+0x28>
 80073d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80073d8:	ed9d 0a00 	vldr	s0, [sp]
 80073dc:	f000 f8b8 	bl	8007550 <__kernel_sinf>
 80073e0:	eeb1 0a40 	vneg.f32	s0, s0
 80073e4:	e7e2      	b.n	80073ac <cosf+0x28>
 80073e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80073ea:	ed9d 0a00 	vldr	s0, [sp]
 80073ee:	f000 f857 	bl	80074a0 <__kernel_cosf>
 80073f2:	e7f5      	b.n	80073e0 <cosf+0x5c>
 80073f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80073f8:	ed9d 0a00 	vldr	s0, [sp]
 80073fc:	2001      	movs	r0, #1
 80073fe:	f000 f8a7 	bl	8007550 <__kernel_sinf>
 8007402:	e7d3      	b.n	80073ac <cosf+0x28>
 8007404:	3f490fd8 	.word	0x3f490fd8
 8007408:	00000000 	.word	0x00000000

0800740c <sinf>:
 800740c:	ee10 3a10 	vmov	r3, s0
 8007410:	b507      	push	{r0, r1, r2, lr}
 8007412:	4a1f      	ldr	r2, [pc, #124]	@ (8007490 <sinf+0x84>)
 8007414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007418:	4293      	cmp	r3, r2
 800741a:	d807      	bhi.n	800742c <sinf+0x20>
 800741c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007494 <sinf+0x88>
 8007420:	2000      	movs	r0, #0
 8007422:	b003      	add	sp, #12
 8007424:	f85d eb04 	ldr.w	lr, [sp], #4
 8007428:	f000 b892 	b.w	8007550 <__kernel_sinf>
 800742c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007430:	d304      	bcc.n	800743c <sinf+0x30>
 8007432:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007436:	b003      	add	sp, #12
 8007438:	f85d fb04 	ldr.w	pc, [sp], #4
 800743c:	4668      	mov	r0, sp
 800743e:	f000 f96f 	bl	8007720 <__ieee754_rem_pio2f>
 8007442:	f000 0003 	and.w	r0, r0, #3
 8007446:	2801      	cmp	r0, #1
 8007448:	d00a      	beq.n	8007460 <sinf+0x54>
 800744a:	2802      	cmp	r0, #2
 800744c:	d00f      	beq.n	800746e <sinf+0x62>
 800744e:	b9c0      	cbnz	r0, 8007482 <sinf+0x76>
 8007450:	eddd 0a01 	vldr	s1, [sp, #4]
 8007454:	ed9d 0a00 	vldr	s0, [sp]
 8007458:	2001      	movs	r0, #1
 800745a:	f000 f879 	bl	8007550 <__kernel_sinf>
 800745e:	e7ea      	b.n	8007436 <sinf+0x2a>
 8007460:	eddd 0a01 	vldr	s1, [sp, #4]
 8007464:	ed9d 0a00 	vldr	s0, [sp]
 8007468:	f000 f81a 	bl	80074a0 <__kernel_cosf>
 800746c:	e7e3      	b.n	8007436 <sinf+0x2a>
 800746e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007472:	ed9d 0a00 	vldr	s0, [sp]
 8007476:	2001      	movs	r0, #1
 8007478:	f000 f86a 	bl	8007550 <__kernel_sinf>
 800747c:	eeb1 0a40 	vneg.f32	s0, s0
 8007480:	e7d9      	b.n	8007436 <sinf+0x2a>
 8007482:	eddd 0a01 	vldr	s1, [sp, #4]
 8007486:	ed9d 0a00 	vldr	s0, [sp]
 800748a:	f000 f809 	bl	80074a0 <__kernel_cosf>
 800748e:	e7f5      	b.n	800747c <sinf+0x70>
 8007490:	3f490fd8 	.word	0x3f490fd8
 8007494:	00000000 	.word	0x00000000

08007498 <__ieee754_sqrtf>:
 8007498:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800749c:	4770      	bx	lr
	...

080074a0 <__kernel_cosf>:
 80074a0:	ee10 3a10 	vmov	r3, s0
 80074a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074a8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80074ac:	eef0 6a40 	vmov.f32	s13, s0
 80074b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80074b4:	d204      	bcs.n	80074c0 <__kernel_cosf+0x20>
 80074b6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80074ba:	ee17 2a90 	vmov	r2, s15
 80074be:	b342      	cbz	r2, 8007512 <__kernel_cosf+0x72>
 80074c0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80074c4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007530 <__kernel_cosf+0x90>
 80074c8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007534 <__kernel_cosf+0x94>
 80074cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007538 <__kernel_cosf+0x98>)
 80074ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 80074d2:	4293      	cmp	r3, r2
 80074d4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800753c <__kernel_cosf+0x9c>
 80074d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80074dc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007540 <__kernel_cosf+0xa0>
 80074e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80074e4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007544 <__kernel_cosf+0xa4>
 80074e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80074ec:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8007548 <__kernel_cosf+0xa8>
 80074f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80074f4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80074f8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80074fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007500:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007508:	d804      	bhi.n	8007514 <__kernel_cosf+0x74>
 800750a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800750e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007512:	4770      	bx	lr
 8007514:	4a0d      	ldr	r2, [pc, #52]	@ (800754c <__kernel_cosf+0xac>)
 8007516:	4293      	cmp	r3, r2
 8007518:	bf9a      	itte	ls
 800751a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800751e:	ee07 3a10 	vmovls	s14, r3
 8007522:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8007526:	ee30 0a47 	vsub.f32	s0, s0, s14
 800752a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800752e:	e7ec      	b.n	800750a <__kernel_cosf+0x6a>
 8007530:	ad47d74e 	.word	0xad47d74e
 8007534:	310f74f6 	.word	0x310f74f6
 8007538:	3e999999 	.word	0x3e999999
 800753c:	b493f27c 	.word	0xb493f27c
 8007540:	37d00d01 	.word	0x37d00d01
 8007544:	bab60b61 	.word	0xbab60b61
 8007548:	3d2aaaab 	.word	0x3d2aaaab
 800754c:	3f480000 	.word	0x3f480000

08007550 <__kernel_sinf>:
 8007550:	ee10 3a10 	vmov	r3, s0
 8007554:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007558:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800755c:	d204      	bcs.n	8007568 <__kernel_sinf+0x18>
 800755e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007562:	ee17 3a90 	vmov	r3, s15
 8007566:	b35b      	cbz	r3, 80075c0 <__kernel_sinf+0x70>
 8007568:	ee20 7a00 	vmul.f32	s14, s0, s0
 800756c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80075c4 <__kernel_sinf+0x74>
 8007570:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80075c8 <__kernel_sinf+0x78>
 8007574:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007578:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80075cc <__kernel_sinf+0x7c>
 800757c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007580:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80075d0 <__kernel_sinf+0x80>
 8007584:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007588:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80075d4 <__kernel_sinf+0x84>
 800758c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007590:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007594:	b930      	cbnz	r0, 80075a4 <__kernel_sinf+0x54>
 8007596:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80075d8 <__kernel_sinf+0x88>
 800759a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800759e:	eea6 0a26 	vfma.f32	s0, s12, s13
 80075a2:	4770      	bx	lr
 80075a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80075a8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80075ac:	eee0 7a86 	vfma.f32	s15, s1, s12
 80075b0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80075b4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80075dc <__kernel_sinf+0x8c>
 80075b8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80075bc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	2f2ec9d3 	.word	0x2f2ec9d3
 80075c8:	b2d72f34 	.word	0xb2d72f34
 80075cc:	3638ef1b 	.word	0x3638ef1b
 80075d0:	b9500d01 	.word	0xb9500d01
 80075d4:	3c088889 	.word	0x3c088889
 80075d8:	be2aaaab 	.word	0xbe2aaaab
 80075dc:	3e2aaaab 	.word	0x3e2aaaab

080075e0 <__ieee754_atan2f>:
 80075e0:	ee10 2a90 	vmov	r2, s1
 80075e4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80075e8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80075ec:	b510      	push	{r4, lr}
 80075ee:	eef0 7a40 	vmov.f32	s15, s0
 80075f2:	d806      	bhi.n	8007602 <__ieee754_atan2f+0x22>
 80075f4:	ee10 0a10 	vmov	r0, s0
 80075f8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80075fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007600:	d904      	bls.n	800760c <__ieee754_atan2f+0x2c>
 8007602:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007606:	eeb0 0a67 	vmov.f32	s0, s15
 800760a:	bd10      	pop	{r4, pc}
 800760c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8007610:	d103      	bne.n	800761a <__ieee754_atan2f+0x3a>
 8007612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007616:	f000 b9b3 	b.w	8007980 <atanf>
 800761a:	1794      	asrs	r4, r2, #30
 800761c:	f004 0402 	and.w	r4, r4, #2
 8007620:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007624:	b943      	cbnz	r3, 8007638 <__ieee754_atan2f+0x58>
 8007626:	2c02      	cmp	r4, #2
 8007628:	d05e      	beq.n	80076e8 <__ieee754_atan2f+0x108>
 800762a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80076fc <__ieee754_atan2f+0x11c>
 800762e:	2c03      	cmp	r4, #3
 8007630:	bf08      	it	eq
 8007632:	eef0 7a47 	vmoveq.f32	s15, s14
 8007636:	e7e6      	b.n	8007606 <__ieee754_atan2f+0x26>
 8007638:	b941      	cbnz	r1, 800764c <__ieee754_atan2f+0x6c>
 800763a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8007700 <__ieee754_atan2f+0x120>
 800763e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007704 <__ieee754_atan2f+0x124>
 8007642:	2800      	cmp	r0, #0
 8007644:	bfa8      	it	ge
 8007646:	eef0 7a47 	vmovge.f32	s15, s14
 800764a:	e7dc      	b.n	8007606 <__ieee754_atan2f+0x26>
 800764c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007650:	d110      	bne.n	8007674 <__ieee754_atan2f+0x94>
 8007652:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007656:	f104 34ff 	add.w	r4, r4, #4294967295
 800765a:	d107      	bne.n	800766c <__ieee754_atan2f+0x8c>
 800765c:	2c02      	cmp	r4, #2
 800765e:	d846      	bhi.n	80076ee <__ieee754_atan2f+0x10e>
 8007660:	4b29      	ldr	r3, [pc, #164]	@ (8007708 <__ieee754_atan2f+0x128>)
 8007662:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007666:	edd3 7a00 	vldr	s15, [r3]
 800766a:	e7cc      	b.n	8007606 <__ieee754_atan2f+0x26>
 800766c:	2c02      	cmp	r4, #2
 800766e:	d841      	bhi.n	80076f4 <__ieee754_atan2f+0x114>
 8007670:	4b26      	ldr	r3, [pc, #152]	@ (800770c <__ieee754_atan2f+0x12c>)
 8007672:	e7f6      	b.n	8007662 <__ieee754_atan2f+0x82>
 8007674:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007678:	d0df      	beq.n	800763a <__ieee754_atan2f+0x5a>
 800767a:	1a5b      	subs	r3, r3, r1
 800767c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8007680:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007684:	da1a      	bge.n	80076bc <__ieee754_atan2f+0xdc>
 8007686:	2a00      	cmp	r2, #0
 8007688:	da01      	bge.n	800768e <__ieee754_atan2f+0xae>
 800768a:	313c      	adds	r1, #60	@ 0x3c
 800768c:	db19      	blt.n	80076c2 <__ieee754_atan2f+0xe2>
 800768e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007692:	f000 fa49 	bl	8007b28 <fabsf>
 8007696:	f000 f973 	bl	8007980 <atanf>
 800769a:	eef0 7a40 	vmov.f32	s15, s0
 800769e:	2c01      	cmp	r4, #1
 80076a0:	d012      	beq.n	80076c8 <__ieee754_atan2f+0xe8>
 80076a2:	2c02      	cmp	r4, #2
 80076a4:	d017      	beq.n	80076d6 <__ieee754_atan2f+0xf6>
 80076a6:	2c00      	cmp	r4, #0
 80076a8:	d0ad      	beq.n	8007606 <__ieee754_atan2f+0x26>
 80076aa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007710 <__ieee754_atan2f+0x130>
 80076ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076b2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007714 <__ieee754_atan2f+0x134>
 80076b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076ba:	e7a4      	b.n	8007606 <__ieee754_atan2f+0x26>
 80076bc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8007704 <__ieee754_atan2f+0x124>
 80076c0:	e7ed      	b.n	800769e <__ieee754_atan2f+0xbe>
 80076c2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007718 <__ieee754_atan2f+0x138>
 80076c6:	e7ea      	b.n	800769e <__ieee754_atan2f+0xbe>
 80076c8:	ee17 3a90 	vmov	r3, s15
 80076cc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	e797      	b.n	8007606 <__ieee754_atan2f+0x26>
 80076d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007710 <__ieee754_atan2f+0x130>
 80076da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076de:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007714 <__ieee754_atan2f+0x134>
 80076e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e6:	e78e      	b.n	8007606 <__ieee754_atan2f+0x26>
 80076e8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8007714 <__ieee754_atan2f+0x134>
 80076ec:	e78b      	b.n	8007606 <__ieee754_atan2f+0x26>
 80076ee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800771c <__ieee754_atan2f+0x13c>
 80076f2:	e788      	b.n	8007606 <__ieee754_atan2f+0x26>
 80076f4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8007718 <__ieee754_atan2f+0x138>
 80076f8:	e785      	b.n	8007606 <__ieee754_atan2f+0x26>
 80076fa:	bf00      	nop
 80076fc:	c0490fdb 	.word	0xc0490fdb
 8007700:	bfc90fdb 	.word	0xbfc90fdb
 8007704:	3fc90fdb 	.word	0x3fc90fdb
 8007708:	080081b8 	.word	0x080081b8
 800770c:	080081ac 	.word	0x080081ac
 8007710:	33bbbd2e 	.word	0x33bbbd2e
 8007714:	40490fdb 	.word	0x40490fdb
 8007718:	00000000 	.word	0x00000000
 800771c:	3f490fdb 	.word	0x3f490fdb

08007720 <__ieee754_rem_pio2f>:
 8007720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007722:	ee10 6a10 	vmov	r6, s0
 8007726:	4b88      	ldr	r3, [pc, #544]	@ (8007948 <__ieee754_rem_pio2f+0x228>)
 8007728:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800772c:	429d      	cmp	r5, r3
 800772e:	b087      	sub	sp, #28
 8007730:	4604      	mov	r4, r0
 8007732:	d805      	bhi.n	8007740 <__ieee754_rem_pio2f+0x20>
 8007734:	2300      	movs	r3, #0
 8007736:	ed80 0a00 	vstr	s0, [r0]
 800773a:	6043      	str	r3, [r0, #4]
 800773c:	2000      	movs	r0, #0
 800773e:	e022      	b.n	8007786 <__ieee754_rem_pio2f+0x66>
 8007740:	4b82      	ldr	r3, [pc, #520]	@ (800794c <__ieee754_rem_pio2f+0x22c>)
 8007742:	429d      	cmp	r5, r3
 8007744:	d83a      	bhi.n	80077bc <__ieee754_rem_pio2f+0x9c>
 8007746:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800774a:	2e00      	cmp	r6, #0
 800774c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007950 <__ieee754_rem_pio2f+0x230>
 8007750:	4a80      	ldr	r2, [pc, #512]	@ (8007954 <__ieee754_rem_pio2f+0x234>)
 8007752:	f023 030f 	bic.w	r3, r3, #15
 8007756:	dd18      	ble.n	800778a <__ieee754_rem_pio2f+0x6a>
 8007758:	4293      	cmp	r3, r2
 800775a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800775e:	bf09      	itett	eq
 8007760:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007958 <__ieee754_rem_pio2f+0x238>
 8007764:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800795c <__ieee754_rem_pio2f+0x23c>
 8007768:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8007960 <__ieee754_rem_pio2f+0x240>
 800776c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007770:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007778:	ed80 7a00 	vstr	s14, [r0]
 800777c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007780:	edc0 7a01 	vstr	s15, [r0, #4]
 8007784:	2001      	movs	r0, #1
 8007786:	b007      	add	sp, #28
 8007788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800778a:	4293      	cmp	r3, r2
 800778c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007790:	bf09      	itett	eq
 8007792:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007958 <__ieee754_rem_pio2f+0x238>
 8007796:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800795c <__ieee754_rem_pio2f+0x23c>
 800779a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8007960 <__ieee754_rem_pio2f+0x240>
 800779e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80077a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80077a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077aa:	ed80 7a00 	vstr	s14, [r0]
 80077ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b2:	edc0 7a01 	vstr	s15, [r0, #4]
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ba:	e7e4      	b.n	8007786 <__ieee754_rem_pio2f+0x66>
 80077bc:	4b69      	ldr	r3, [pc, #420]	@ (8007964 <__ieee754_rem_pio2f+0x244>)
 80077be:	429d      	cmp	r5, r3
 80077c0:	d873      	bhi.n	80078aa <__ieee754_rem_pio2f+0x18a>
 80077c2:	f000 f9b1 	bl	8007b28 <fabsf>
 80077c6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007968 <__ieee754_rem_pio2f+0x248>
 80077ca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80077ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077da:	ee17 0a90 	vmov	r0, s15
 80077de:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007950 <__ieee754_rem_pio2f+0x230>
 80077e2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80077e6:	281f      	cmp	r0, #31
 80077e8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800795c <__ieee754_rem_pio2f+0x23c>
 80077ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f0:	eeb1 6a47 	vneg.f32	s12, s14
 80077f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80077f8:	ee16 1a90 	vmov	r1, s13
 80077fc:	dc09      	bgt.n	8007812 <__ieee754_rem_pio2f+0xf2>
 80077fe:	4a5b      	ldr	r2, [pc, #364]	@ (800796c <__ieee754_rem_pio2f+0x24c>)
 8007800:	1e47      	subs	r7, r0, #1
 8007802:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007806:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800780a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800780e:	4293      	cmp	r3, r2
 8007810:	d107      	bne.n	8007822 <__ieee754_rem_pio2f+0x102>
 8007812:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007816:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800781a:	2a08      	cmp	r2, #8
 800781c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007820:	dc14      	bgt.n	800784c <__ieee754_rem_pio2f+0x12c>
 8007822:	6021      	str	r1, [r4, #0]
 8007824:	ed94 7a00 	vldr	s14, [r4]
 8007828:	ee30 0a47 	vsub.f32	s0, s0, s14
 800782c:	2e00      	cmp	r6, #0
 800782e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007832:	ed84 0a01 	vstr	s0, [r4, #4]
 8007836:	daa6      	bge.n	8007786 <__ieee754_rem_pio2f+0x66>
 8007838:	eeb1 7a47 	vneg.f32	s14, s14
 800783c:	eeb1 0a40 	vneg.f32	s0, s0
 8007840:	ed84 7a00 	vstr	s14, [r4]
 8007844:	ed84 0a01 	vstr	s0, [r4, #4]
 8007848:	4240      	negs	r0, r0
 800784a:	e79c      	b.n	8007786 <__ieee754_rem_pio2f+0x66>
 800784c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007958 <__ieee754_rem_pio2f+0x238>
 8007850:	eef0 6a40 	vmov.f32	s13, s0
 8007854:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007858:	ee70 7a66 	vsub.f32	s15, s0, s13
 800785c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007860:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007960 <__ieee754_rem_pio2f+0x240>
 8007864:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007868:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800786c:	ee15 2a90 	vmov	r2, s11
 8007870:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007874:	1a5b      	subs	r3, r3, r1
 8007876:	2b19      	cmp	r3, #25
 8007878:	dc04      	bgt.n	8007884 <__ieee754_rem_pio2f+0x164>
 800787a:	edc4 5a00 	vstr	s11, [r4]
 800787e:	eeb0 0a66 	vmov.f32	s0, s13
 8007882:	e7cf      	b.n	8007824 <__ieee754_rem_pio2f+0x104>
 8007884:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007970 <__ieee754_rem_pio2f+0x250>
 8007888:	eeb0 0a66 	vmov.f32	s0, s13
 800788c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007890:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007894:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007974 <__ieee754_rem_pio2f+0x254>
 8007898:	eee6 7a25 	vfma.f32	s15, s12, s11
 800789c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80078a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80078a4:	ed84 7a00 	vstr	s14, [r4]
 80078a8:	e7bc      	b.n	8007824 <__ieee754_rem_pio2f+0x104>
 80078aa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80078ae:	d306      	bcc.n	80078be <__ieee754_rem_pio2f+0x19e>
 80078b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80078b4:	edc0 7a01 	vstr	s15, [r0, #4]
 80078b8:	edc0 7a00 	vstr	s15, [r0]
 80078bc:	e73e      	b.n	800773c <__ieee754_rem_pio2f+0x1c>
 80078be:	15ea      	asrs	r2, r5, #23
 80078c0:	3a86      	subs	r2, #134	@ 0x86
 80078c2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078ce:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007978 <__ieee754_rem_pio2f+0x258>
 80078d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078da:	ed8d 7a03 	vstr	s14, [sp, #12]
 80078de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078ee:	ed8d 7a04 	vstr	s14, [sp, #16]
 80078f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fe:	edcd 7a05 	vstr	s15, [sp, #20]
 8007902:	d11e      	bne.n	8007942 <__ieee754_rem_pio2f+0x222>
 8007904:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2302      	movne	r3, #2
 8007912:	491a      	ldr	r1, [pc, #104]	@ (800797c <__ieee754_rem_pio2f+0x25c>)
 8007914:	9101      	str	r1, [sp, #4]
 8007916:	2102      	movs	r1, #2
 8007918:	9100      	str	r1, [sp, #0]
 800791a:	a803      	add	r0, sp, #12
 800791c:	4621      	mov	r1, r4
 800791e:	f000 f90b 	bl	8007b38 <__kernel_rem_pio2f>
 8007922:	2e00      	cmp	r6, #0
 8007924:	f6bf af2f 	bge.w	8007786 <__ieee754_rem_pio2f+0x66>
 8007928:	edd4 7a00 	vldr	s15, [r4]
 800792c:	eef1 7a67 	vneg.f32	s15, s15
 8007930:	edc4 7a00 	vstr	s15, [r4]
 8007934:	edd4 7a01 	vldr	s15, [r4, #4]
 8007938:	eef1 7a67 	vneg.f32	s15, s15
 800793c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007940:	e782      	b.n	8007848 <__ieee754_rem_pio2f+0x128>
 8007942:	2303      	movs	r3, #3
 8007944:	e7e5      	b.n	8007912 <__ieee754_rem_pio2f+0x1f2>
 8007946:	bf00      	nop
 8007948:	3f490fd8 	.word	0x3f490fd8
 800794c:	4016cbe3 	.word	0x4016cbe3
 8007950:	3fc90f80 	.word	0x3fc90f80
 8007954:	3fc90fd0 	.word	0x3fc90fd0
 8007958:	37354400 	.word	0x37354400
 800795c:	37354443 	.word	0x37354443
 8007960:	2e85a308 	.word	0x2e85a308
 8007964:	43490f80 	.word	0x43490f80
 8007968:	3f22f984 	.word	0x3f22f984
 800796c:	080081c4 	.word	0x080081c4
 8007970:	2e85a300 	.word	0x2e85a300
 8007974:	248d3132 	.word	0x248d3132
 8007978:	43800000 	.word	0x43800000
 800797c:	08008244 	.word	0x08008244

08007980 <atanf>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	ee10 5a10 	vmov	r5, s0
 8007986:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800798a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800798e:	eef0 7a40 	vmov.f32	s15, s0
 8007992:	d310      	bcc.n	80079b6 <atanf+0x36>
 8007994:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8007998:	d904      	bls.n	80079a4 <atanf+0x24>
 800799a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800799e:	eeb0 0a67 	vmov.f32	s0, s15
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8007adc <atanf+0x15c>
 80079a8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8007ae0 <atanf+0x160>
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	bfc8      	it	gt
 80079b0:	eef0 7a47 	vmovgt.f32	s15, s14
 80079b4:	e7f3      	b.n	800799e <atanf+0x1e>
 80079b6:	4b4b      	ldr	r3, [pc, #300]	@ (8007ae4 <atanf+0x164>)
 80079b8:	429c      	cmp	r4, r3
 80079ba:	d810      	bhi.n	80079de <atanf+0x5e>
 80079bc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80079c0:	d20a      	bcs.n	80079d8 <atanf+0x58>
 80079c2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8007ae8 <atanf+0x168>
 80079c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80079ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80079d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d6:	dce2      	bgt.n	800799e <atanf+0x1e>
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295
 80079dc:	e013      	b.n	8007a06 <atanf+0x86>
 80079de:	f000 f8a3 	bl	8007b28 <fabsf>
 80079e2:	4b42      	ldr	r3, [pc, #264]	@ (8007aec <atanf+0x16c>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	d84f      	bhi.n	8007a88 <atanf+0x108>
 80079e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80079ec:	429c      	cmp	r4, r3
 80079ee:	d841      	bhi.n	8007a74 <atanf+0xf4>
 80079f0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80079f4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80079f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80079fc:	2300      	movs	r3, #0
 80079fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007a02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007a0c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8007af0 <atanf+0x170>
 8007a10:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8007af4 <atanf+0x174>
 8007a14:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8007af8 <atanf+0x178>
 8007a18:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007a1c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007a20:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007afc <atanf+0x17c>
 8007a24:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007a28:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8007b00 <atanf+0x180>
 8007a2c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007a30:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8007b04 <atanf+0x184>
 8007a34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007a38:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007b08 <atanf+0x188>
 8007a3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007a40:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8007b0c <atanf+0x18c>
 8007a44:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007a48:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007b10 <atanf+0x190>
 8007a4c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007a50:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8007b14 <atanf+0x194>
 8007a54:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007a58:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007b18 <atanf+0x198>
 8007a5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007a60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007a64:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007a68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007a6c:	d121      	bne.n	8007ab2 <atanf+0x132>
 8007a6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a72:	e794      	b.n	800799e <atanf+0x1e>
 8007a74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007a78:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007a7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007a80:	2301      	movs	r3, #1
 8007a82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007a86:	e7be      	b.n	8007a06 <atanf+0x86>
 8007a88:	4b24      	ldr	r3, [pc, #144]	@ (8007b1c <atanf+0x19c>)
 8007a8a:	429c      	cmp	r4, r3
 8007a8c:	d80b      	bhi.n	8007aa6 <atanf+0x126>
 8007a8e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8007a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a96:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa4:	e7af      	b.n	8007a06 <atanf+0x86>
 8007aa6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007aaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e7a9      	b.n	8007a06 <atanf+0x86>
 8007ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8007b20 <atanf+0x1a0>)
 8007ab4:	491b      	ldr	r1, [pc, #108]	@ (8007b24 <atanf+0x1a4>)
 8007ab6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007aba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007abe:	edd3 6a00 	vldr	s13, [r3]
 8007ac2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007acc:	edd2 7a00 	vldr	s15, [r2]
 8007ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ad4:	bfb8      	it	lt
 8007ad6:	eef1 7a67 	vneglt.f32	s15, s15
 8007ada:	e760      	b.n	800799e <atanf+0x1e>
 8007adc:	bfc90fdb 	.word	0xbfc90fdb
 8007ae0:	3fc90fdb 	.word	0x3fc90fdb
 8007ae4:	3edfffff 	.word	0x3edfffff
 8007ae8:	7149f2ca 	.word	0x7149f2ca
 8007aec:	3f97ffff 	.word	0x3f97ffff
 8007af0:	3c8569d7 	.word	0x3c8569d7
 8007af4:	3d4bda59 	.word	0x3d4bda59
 8007af8:	bd6ef16b 	.word	0xbd6ef16b
 8007afc:	3d886b35 	.word	0x3d886b35
 8007b00:	3dba2e6e 	.word	0x3dba2e6e
 8007b04:	3e124925 	.word	0x3e124925
 8007b08:	3eaaaaab 	.word	0x3eaaaaab
 8007b0c:	bd15a221 	.word	0xbd15a221
 8007b10:	bd9d8795 	.word	0xbd9d8795
 8007b14:	bde38e38 	.word	0xbde38e38
 8007b18:	be4ccccd 	.word	0xbe4ccccd
 8007b1c:	401bffff 	.word	0x401bffff
 8007b20:	0800856c 	.word	0x0800856c
 8007b24:	0800855c 	.word	0x0800855c

08007b28 <fabsf>:
 8007b28:	ee10 3a10 	vmov	r3, s0
 8007b2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b30:	ee00 3a10 	vmov	s0, r3
 8007b34:	4770      	bx	lr
	...

08007b38 <__kernel_rem_pio2f>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ed2d 8b04 	vpush	{d8-d9}
 8007b40:	b0d9      	sub	sp, #356	@ 0x164
 8007b42:	4690      	mov	r8, r2
 8007b44:	9001      	str	r0, [sp, #4]
 8007b46:	4ab6      	ldr	r2, [pc, #728]	@ (8007e20 <__kernel_rem_pio2f+0x2e8>)
 8007b48:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8007b4a:	f118 0f04 	cmn.w	r8, #4
 8007b4e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8007b52:	460f      	mov	r7, r1
 8007b54:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b58:	db26      	blt.n	8007ba8 <__kernel_rem_pio2f+0x70>
 8007b5a:	f1b8 0203 	subs.w	r2, r8, #3
 8007b5e:	bf48      	it	mi
 8007b60:	f108 0204 	addmi.w	r2, r8, #4
 8007b64:	10d2      	asrs	r2, r2, #3
 8007b66:	1c55      	adds	r5, r2, #1
 8007b68:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007b6a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8007e30 <__kernel_rem_pio2f+0x2f8>
 8007b6e:	00e8      	lsls	r0, r5, #3
 8007b70:	eba2 060b 	sub.w	r6, r2, fp
 8007b74:	9002      	str	r0, [sp, #8]
 8007b76:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8007b7a:	eb0a 0c0b 	add.w	ip, sl, fp
 8007b7e:	ac1c      	add	r4, sp, #112	@ 0x70
 8007b80:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007b84:	2000      	movs	r0, #0
 8007b86:	4560      	cmp	r0, ip
 8007b88:	dd10      	ble.n	8007bac <__kernel_rem_pio2f+0x74>
 8007b8a:	a91c      	add	r1, sp, #112	@ 0x70
 8007b8c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007b90:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007b94:	2600      	movs	r6, #0
 8007b96:	4556      	cmp	r6, sl
 8007b98:	dc24      	bgt.n	8007be4 <__kernel_rem_pio2f+0xac>
 8007b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b9e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8007e30 <__kernel_rem_pio2f+0x2f8>
 8007ba2:	4684      	mov	ip, r0
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	e016      	b.n	8007bd6 <__kernel_rem_pio2f+0x9e>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	e7dc      	b.n	8007b66 <__kernel_rem_pio2f+0x2e>
 8007bac:	42c6      	cmn	r6, r0
 8007bae:	bf5d      	ittte	pl
 8007bb0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007bb4:	ee07 1a90 	vmovpl	s15, r1
 8007bb8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007bbc:	eef0 7a47 	vmovmi.f32	s15, s14
 8007bc0:	ece4 7a01 	vstmia	r4!, {s15}
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	e7de      	b.n	8007b86 <__kernel_rem_pio2f+0x4e>
 8007bc8:	ecfe 6a01 	vldmia	lr!, {s13}
 8007bcc:	ed3c 7a01 	vldmdb	ip!, {s14}
 8007bd0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007bd4:	3401      	adds	r4, #1
 8007bd6:	455c      	cmp	r4, fp
 8007bd8:	ddf6      	ble.n	8007bc8 <__kernel_rem_pio2f+0x90>
 8007bda:	ece9 7a01 	vstmia	r9!, {s15}
 8007bde:	3601      	adds	r6, #1
 8007be0:	3004      	adds	r0, #4
 8007be2:	e7d8      	b.n	8007b96 <__kernel_rem_pio2f+0x5e>
 8007be4:	a908      	add	r1, sp, #32
 8007be6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bea:	9104      	str	r1, [sp, #16]
 8007bec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007bee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8007e2c <__kernel_rem_pio2f+0x2f4>
 8007bf2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8007e28 <__kernel_rem_pio2f+0x2f0>
 8007bf6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007bfa:	9203      	str	r2, [sp, #12]
 8007bfc:	4654      	mov	r4, sl
 8007bfe:	00a2      	lsls	r2, r4, #2
 8007c00:	9205      	str	r2, [sp, #20]
 8007c02:	aa58      	add	r2, sp, #352	@ 0x160
 8007c04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007c08:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007c0c:	a944      	add	r1, sp, #272	@ 0x110
 8007c0e:	aa08      	add	r2, sp, #32
 8007c10:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007c14:	4694      	mov	ip, r2
 8007c16:	4626      	mov	r6, r4
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	dc4c      	bgt.n	8007cb6 <__kernel_rem_pio2f+0x17e>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c22:	f000 f9f1 	bl	8008008 <scalbnf>
 8007c26:	eeb0 8a40 	vmov.f32	s16, s0
 8007c2a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8007c2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007c32:	f000 fa4f 	bl	80080d4 <floorf>
 8007c36:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007c3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007c48:	ee17 9a90 	vmov	r9, s15
 8007c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c50:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007c54:	dd41      	ble.n	8007cda <__kernel_rem_pio2f+0x1a2>
 8007c56:	f104 3cff 	add.w	ip, r4, #4294967295
 8007c5a:	a908      	add	r1, sp, #32
 8007c5c:	f1c5 0e08 	rsb	lr, r5, #8
 8007c60:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007c64:	fa46 f00e 	asr.w	r0, r6, lr
 8007c68:	4481      	add	r9, r0
 8007c6a:	fa00 f00e 	lsl.w	r0, r0, lr
 8007c6e:	1a36      	subs	r6, r6, r0
 8007c70:	f1c5 0007 	rsb	r0, r5, #7
 8007c74:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007c78:	4106      	asrs	r6, r0
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	dd3c      	ble.n	8007cf8 <__kernel_rem_pio2f+0x1c0>
 8007c7e:	f04f 0e00 	mov.w	lr, #0
 8007c82:	f109 0901 	add.w	r9, r9, #1
 8007c86:	4670      	mov	r0, lr
 8007c88:	4574      	cmp	r4, lr
 8007c8a:	dc68      	bgt.n	8007d5e <__kernel_rem_pio2f+0x226>
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	dd03      	ble.n	8007c98 <__kernel_rem_pio2f+0x160>
 8007c90:	2d01      	cmp	r5, #1
 8007c92:	d074      	beq.n	8007d7e <__kernel_rem_pio2f+0x246>
 8007c94:	2d02      	cmp	r5, #2
 8007c96:	d07d      	beq.n	8007d94 <__kernel_rem_pio2f+0x25c>
 8007c98:	2e02      	cmp	r6, #2
 8007c9a:	d12d      	bne.n	8007cf8 <__kernel_rem_pio2f+0x1c0>
 8007c9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007ca0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007ca4:	b340      	cbz	r0, 8007cf8 <__kernel_rem_pio2f+0x1c0>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	9306      	str	r3, [sp, #24]
 8007caa:	f000 f9ad 	bl	8008008 <scalbnf>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007cb4:	e020      	b.n	8007cf8 <__kernel_rem_pio2f+0x1c0>
 8007cb6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007cba:	3e01      	subs	r6, #1
 8007cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cc4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007cc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007ccc:	ecac 0a01 	vstmia	ip!, {s0}
 8007cd0:	ed30 0a01 	vldmdb	r0!, {s0}
 8007cd4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007cd8:	e79e      	b.n	8007c18 <__kernel_rem_pio2f+0xe0>
 8007cda:	d105      	bne.n	8007ce8 <__kernel_rem_pio2f+0x1b0>
 8007cdc:	1e60      	subs	r0, r4, #1
 8007cde:	a908      	add	r1, sp, #32
 8007ce0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007ce4:	11f6      	asrs	r6, r6, #7
 8007ce6:	e7c8      	b.n	8007c7a <__kernel_rem_pio2f+0x142>
 8007ce8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007cec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf4:	da31      	bge.n	8007d5a <__kernel_rem_pio2f+0x222>
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d00:	f040 8098 	bne.w	8007e34 <__kernel_rem_pio2f+0x2fc>
 8007d04:	1e60      	subs	r0, r4, #1
 8007d06:	2200      	movs	r2, #0
 8007d08:	4550      	cmp	r0, sl
 8007d0a:	da4b      	bge.n	8007da4 <__kernel_rem_pio2f+0x26c>
 8007d0c:	2a00      	cmp	r2, #0
 8007d0e:	d065      	beq.n	8007ddc <__kernel_rem_pio2f+0x2a4>
 8007d10:	3c01      	subs	r4, #1
 8007d12:	ab08      	add	r3, sp, #32
 8007d14:	3d08      	subs	r5, #8
 8007d16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f8      	beq.n	8007d10 <__kernel_rem_pio2f+0x1d8>
 8007d1e:	4628      	mov	r0, r5
 8007d20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007d24:	f000 f970 	bl	8008008 <scalbnf>
 8007d28:	1c63      	adds	r3, r4, #1
 8007d2a:	aa44      	add	r2, sp, #272	@ 0x110
 8007d2c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007e2c <__kernel_rem_pio2f+0x2f4>
 8007d30:	0099      	lsls	r1, r3, #2
 8007d32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007d36:	4623      	mov	r3, r4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f280 80a9 	bge.w	8007e90 <__kernel_rem_pio2f+0x358>
 8007d3e:	4623      	mov	r3, r4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f2c0 80c7 	blt.w	8007ed4 <__kernel_rem_pio2f+0x39c>
 8007d46:	aa44      	add	r2, sp, #272	@ 0x110
 8007d48:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007d4c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8007e24 <__kernel_rem_pio2f+0x2ec>
 8007d50:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8007e30 <__kernel_rem_pio2f+0x2f8>
 8007d54:	2000      	movs	r0, #0
 8007d56:	1ae2      	subs	r2, r4, r3
 8007d58:	e0b1      	b.n	8007ebe <__kernel_rem_pio2f+0x386>
 8007d5a:	2602      	movs	r6, #2
 8007d5c:	e78f      	b.n	8007c7e <__kernel_rem_pio2f+0x146>
 8007d5e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007d62:	b948      	cbnz	r0, 8007d78 <__kernel_rem_pio2f+0x240>
 8007d64:	b121      	cbz	r1, 8007d70 <__kernel_rem_pio2f+0x238>
 8007d66:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8007d6a:	f842 1c04 	str.w	r1, [r2, #-4]
 8007d6e:	2101      	movs	r1, #1
 8007d70:	f10e 0e01 	add.w	lr, lr, #1
 8007d74:	4608      	mov	r0, r1
 8007d76:	e787      	b.n	8007c88 <__kernel_rem_pio2f+0x150>
 8007d78:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8007d7c:	e7f5      	b.n	8007d6a <__kernel_rem_pio2f+0x232>
 8007d7e:	f104 3cff 	add.w	ip, r4, #4294967295
 8007d82:	aa08      	add	r2, sp, #32
 8007d84:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007d88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d8c:	a908      	add	r1, sp, #32
 8007d8e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007d92:	e781      	b.n	8007c98 <__kernel_rem_pio2f+0x160>
 8007d94:	f104 3cff 	add.w	ip, r4, #4294967295
 8007d98:	aa08      	add	r2, sp, #32
 8007d9a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007d9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007da2:	e7f3      	b.n	8007d8c <__kernel_rem_pio2f+0x254>
 8007da4:	a908      	add	r1, sp, #32
 8007da6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007daa:	3801      	subs	r0, #1
 8007dac:	430a      	orrs	r2, r1
 8007dae:	e7ab      	b.n	8007d08 <__kernel_rem_pio2f+0x1d0>
 8007db0:	3201      	adds	r2, #1
 8007db2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d0fa      	beq.n	8007db0 <__kernel_rem_pio2f+0x278>
 8007dba:	9905      	ldr	r1, [sp, #20]
 8007dbc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8007dc0:	eb0d 0001 	add.w	r0, sp, r1
 8007dc4:	18e6      	adds	r6, r4, r3
 8007dc6:	a91c      	add	r1, sp, #112	@ 0x70
 8007dc8:	f104 0c01 	add.w	ip, r4, #1
 8007dcc:	384c      	subs	r0, #76	@ 0x4c
 8007dce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007dd2:	4422      	add	r2, r4
 8007dd4:	4562      	cmp	r2, ip
 8007dd6:	da04      	bge.n	8007de2 <__kernel_rem_pio2f+0x2aa>
 8007dd8:	4614      	mov	r4, r2
 8007dda:	e710      	b.n	8007bfe <__kernel_rem_pio2f+0xc6>
 8007ddc:	9804      	ldr	r0, [sp, #16]
 8007dde:	2201      	movs	r2, #1
 8007de0:	e7e7      	b.n	8007db2 <__kernel_rem_pio2f+0x27a>
 8007de2:	9903      	ldr	r1, [sp, #12]
 8007de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007de8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007dec:	9105      	str	r1, [sp, #20]
 8007dee:	ee07 1a90 	vmov	s15, r1
 8007df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007df6:	2400      	movs	r4, #0
 8007df8:	ece6 7a01 	vstmia	r6!, {s15}
 8007dfc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8007e30 <__kernel_rem_pio2f+0x2f8>
 8007e00:	46b1      	mov	r9, r6
 8007e02:	455c      	cmp	r4, fp
 8007e04:	dd04      	ble.n	8007e10 <__kernel_rem_pio2f+0x2d8>
 8007e06:	ece0 7a01 	vstmia	r0!, {s15}
 8007e0a:	f10c 0c01 	add.w	ip, ip, #1
 8007e0e:	e7e1      	b.n	8007dd4 <__kernel_rem_pio2f+0x29c>
 8007e10:	ecfe 6a01 	vldmia	lr!, {s13}
 8007e14:	ed39 7a01 	vldmdb	r9!, {s14}
 8007e18:	3401      	adds	r4, #1
 8007e1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e1e:	e7f0      	b.n	8007e02 <__kernel_rem_pio2f+0x2ca>
 8007e20:	080085a8 	.word	0x080085a8
 8007e24:	0800857c 	.word	0x0800857c
 8007e28:	43800000 	.word	0x43800000
 8007e2c:	3b800000 	.word	0x3b800000
 8007e30:	00000000 	.word	0x00000000
 8007e34:	9b02      	ldr	r3, [sp, #8]
 8007e36:	eeb0 0a48 	vmov.f32	s0, s16
 8007e3a:	eba3 0008 	sub.w	r0, r3, r8
 8007e3e:	f000 f8e3 	bl	8008008 <scalbnf>
 8007e42:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8007e28 <__kernel_rem_pio2f+0x2f0>
 8007e46:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4e:	db19      	blt.n	8007e84 <__kernel_rem_pio2f+0x34c>
 8007e50:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8007e2c <__kernel_rem_pio2f+0x2f4>
 8007e54:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007e58:	aa08      	add	r2, sp, #32
 8007e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e5e:	3508      	adds	r5, #8
 8007e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e70:	ee10 3a10 	vmov	r3, s0
 8007e74:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007e78:	ee17 3a90 	vmov	r3, s15
 8007e7c:	3401      	adds	r4, #1
 8007e7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007e82:	e74c      	b.n	8007d1e <__kernel_rem_pio2f+0x1e6>
 8007e84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e88:	aa08      	add	r2, sp, #32
 8007e8a:	ee10 3a10 	vmov	r3, s0
 8007e8e:	e7f6      	b.n	8007e7e <__kernel_rem_pio2f+0x346>
 8007e90:	a808      	add	r0, sp, #32
 8007e92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007e96:	9001      	str	r0, [sp, #4]
 8007e98:	ee07 0a90 	vmov	s15, r0
 8007e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007ea6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007eaa:	ed62 7a01 	vstmdb	r2!, {s15}
 8007eae:	e743      	b.n	8007d38 <__kernel_rem_pio2f+0x200>
 8007eb0:	ecfc 6a01 	vldmia	ip!, {s13}
 8007eb4:	ecb5 7a01 	vldmia	r5!, {s14}
 8007eb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	4550      	cmp	r0, sl
 8007ec0:	dc01      	bgt.n	8007ec6 <__kernel_rem_pio2f+0x38e>
 8007ec2:	4290      	cmp	r0, r2
 8007ec4:	ddf4      	ble.n	8007eb0 <__kernel_rem_pio2f+0x378>
 8007ec6:	a858      	add	r0, sp, #352	@ 0x160
 8007ec8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007ecc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	e735      	b.n	8007d40 <__kernel_rem_pio2f+0x208>
 8007ed4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	dc09      	bgt.n	8007eee <__kernel_rem_pio2f+0x3b6>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dc27      	bgt.n	8007f2e <__kernel_rem_pio2f+0x3f6>
 8007ede:	d040      	beq.n	8007f62 <__kernel_rem_pio2f+0x42a>
 8007ee0:	f009 0007 	and.w	r0, r9, #7
 8007ee4:	b059      	add	sp, #356	@ 0x164
 8007ee6:	ecbd 8b04 	vpop	{d8-d9}
 8007eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d1f5      	bne.n	8007ee0 <__kernel_rem_pio2f+0x3a8>
 8007ef4:	aa30      	add	r2, sp, #192	@ 0xc0
 8007ef6:	1f0b      	subs	r3, r1, #4
 8007ef8:	4413      	add	r3, r2
 8007efa:	461a      	mov	r2, r3
 8007efc:	4620      	mov	r0, r4
 8007efe:	2800      	cmp	r0, #0
 8007f00:	dc50      	bgt.n	8007fa4 <__kernel_rem_pio2f+0x46c>
 8007f02:	4622      	mov	r2, r4
 8007f04:	2a01      	cmp	r2, #1
 8007f06:	dc5d      	bgt.n	8007fc4 <__kernel_rem_pio2f+0x48c>
 8007f08:	ab30      	add	r3, sp, #192	@ 0xc0
 8007f0a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8007e30 <__kernel_rem_pio2f+0x2f8>
 8007f0e:	440b      	add	r3, r1
 8007f10:	2c01      	cmp	r4, #1
 8007f12:	dc67      	bgt.n	8007fe4 <__kernel_rem_pio2f+0x4ac>
 8007f14:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8007f18:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8007f1c:	2e00      	cmp	r6, #0
 8007f1e:	d167      	bne.n	8007ff0 <__kernel_rem_pio2f+0x4b8>
 8007f20:	edc7 6a00 	vstr	s13, [r7]
 8007f24:	ed87 7a01 	vstr	s14, [r7, #4]
 8007f28:	edc7 7a02 	vstr	s15, [r7, #8]
 8007f2c:	e7d8      	b.n	8007ee0 <__kernel_rem_pio2f+0x3a8>
 8007f2e:	ab30      	add	r3, sp, #192	@ 0xc0
 8007f30:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8007e30 <__kernel_rem_pio2f+0x2f8>
 8007f34:	440b      	add	r3, r1
 8007f36:	4622      	mov	r2, r4
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	da24      	bge.n	8007f86 <__kernel_rem_pio2f+0x44e>
 8007f3c:	b34e      	cbz	r6, 8007f92 <__kernel_rem_pio2f+0x45a>
 8007f3e:	eef1 7a47 	vneg.f32	s15, s14
 8007f42:	edc7 7a00 	vstr	s15, [r7]
 8007f46:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8007f4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f4e:	aa31      	add	r2, sp, #196	@ 0xc4
 8007f50:	2301      	movs	r3, #1
 8007f52:	429c      	cmp	r4, r3
 8007f54:	da20      	bge.n	8007f98 <__kernel_rem_pio2f+0x460>
 8007f56:	b10e      	cbz	r6, 8007f5c <__kernel_rem_pio2f+0x424>
 8007f58:	eef1 7a67 	vneg.f32	s15, s15
 8007f5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007f60:	e7be      	b.n	8007ee0 <__kernel_rem_pio2f+0x3a8>
 8007f62:	ab30      	add	r3, sp, #192	@ 0xc0
 8007f64:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8007e30 <__kernel_rem_pio2f+0x2f8>
 8007f68:	440b      	add	r3, r1
 8007f6a:	2c00      	cmp	r4, #0
 8007f6c:	da05      	bge.n	8007f7a <__kernel_rem_pio2f+0x442>
 8007f6e:	b10e      	cbz	r6, 8007f74 <__kernel_rem_pio2f+0x43c>
 8007f70:	eef1 7a67 	vneg.f32	s15, s15
 8007f74:	edc7 7a00 	vstr	s15, [r7]
 8007f78:	e7b2      	b.n	8007ee0 <__kernel_rem_pio2f+0x3a8>
 8007f7a:	ed33 7a01 	vldmdb	r3!, {s14}
 8007f7e:	3c01      	subs	r4, #1
 8007f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f84:	e7f1      	b.n	8007f6a <__kernel_rem_pio2f+0x432>
 8007f86:	ed73 7a01 	vldmdb	r3!, {s15}
 8007f8a:	3a01      	subs	r2, #1
 8007f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f90:	e7d2      	b.n	8007f38 <__kernel_rem_pio2f+0x400>
 8007f92:	eef0 7a47 	vmov.f32	s15, s14
 8007f96:	e7d4      	b.n	8007f42 <__kernel_rem_pio2f+0x40a>
 8007f98:	ecb2 7a01 	vldmia	r2!, {s14}
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fa2:	e7d6      	b.n	8007f52 <__kernel_rem_pio2f+0x41a>
 8007fa4:	ed72 7a01 	vldmdb	r2!, {s15}
 8007fa8:	edd2 6a01 	vldr	s13, [r2, #4]
 8007fac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007fb0:	3801      	subs	r0, #1
 8007fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fb6:	ed82 7a00 	vstr	s14, [r2]
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	edc2 7a01 	vstr	s15, [r2, #4]
 8007fc2:	e79c      	b.n	8007efe <__kernel_rem_pio2f+0x3c6>
 8007fc4:	ed73 7a01 	vldmdb	r3!, {s15}
 8007fc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8007fcc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007fd0:	3a01      	subs	r2, #1
 8007fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fd6:	ed83 7a00 	vstr	s14, [r3]
 8007fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fde:	edc3 7a01 	vstr	s15, [r3, #4]
 8007fe2:	e78f      	b.n	8007f04 <__kernel_rem_pio2f+0x3cc>
 8007fe4:	ed33 7a01 	vldmdb	r3!, {s14}
 8007fe8:	3c01      	subs	r4, #1
 8007fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fee:	e78f      	b.n	8007f10 <__kernel_rem_pio2f+0x3d8>
 8007ff0:	eef1 6a66 	vneg.f32	s13, s13
 8007ff4:	eeb1 7a47 	vneg.f32	s14, s14
 8007ff8:	edc7 6a00 	vstr	s13, [r7]
 8007ffc:	ed87 7a01 	vstr	s14, [r7, #4]
 8008000:	eef1 7a67 	vneg.f32	s15, s15
 8008004:	e790      	b.n	8007f28 <__kernel_rem_pio2f+0x3f0>
 8008006:	bf00      	nop

08008008 <scalbnf>:
 8008008:	ee10 3a10 	vmov	r3, s0
 800800c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008010:	d02b      	beq.n	800806a <scalbnf+0x62>
 8008012:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008016:	d302      	bcc.n	800801e <scalbnf+0x16>
 8008018:	ee30 0a00 	vadd.f32	s0, s0, s0
 800801c:	4770      	bx	lr
 800801e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008022:	d123      	bne.n	800806c <scalbnf+0x64>
 8008024:	4b24      	ldr	r3, [pc, #144]	@ (80080b8 <scalbnf+0xb0>)
 8008026:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80080bc <scalbnf+0xb4>
 800802a:	4298      	cmp	r0, r3
 800802c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008030:	db17      	blt.n	8008062 <scalbnf+0x5a>
 8008032:	ee10 3a10 	vmov	r3, s0
 8008036:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800803a:	3a19      	subs	r2, #25
 800803c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008040:	4288      	cmp	r0, r1
 8008042:	dd15      	ble.n	8008070 <scalbnf+0x68>
 8008044:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80080c0 <scalbnf+0xb8>
 8008048:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80080c4 <scalbnf+0xbc>
 800804c:	ee10 3a10 	vmov	r3, s0
 8008050:	eeb0 7a67 	vmov.f32	s14, s15
 8008054:	2b00      	cmp	r3, #0
 8008056:	bfb8      	it	lt
 8008058:	eef0 7a66 	vmovlt.f32	s15, s13
 800805c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008060:	4770      	bx	lr
 8008062:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80080c8 <scalbnf+0xc0>
 8008066:	ee27 0a80 	vmul.f32	s0, s15, s0
 800806a:	4770      	bx	lr
 800806c:	0dd2      	lsrs	r2, r2, #23
 800806e:	e7e5      	b.n	800803c <scalbnf+0x34>
 8008070:	4410      	add	r0, r2
 8008072:	28fe      	cmp	r0, #254	@ 0xfe
 8008074:	dce6      	bgt.n	8008044 <scalbnf+0x3c>
 8008076:	2800      	cmp	r0, #0
 8008078:	dd06      	ble.n	8008088 <scalbnf+0x80>
 800807a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800807e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008082:	ee00 3a10 	vmov	s0, r3
 8008086:	4770      	bx	lr
 8008088:	f110 0f16 	cmn.w	r0, #22
 800808c:	da09      	bge.n	80080a2 <scalbnf+0x9a>
 800808e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80080c8 <scalbnf+0xc0>
 8008092:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80080cc <scalbnf+0xc4>
 8008096:	ee10 3a10 	vmov	r3, s0
 800809a:	eeb0 7a67 	vmov.f32	s14, s15
 800809e:	2b00      	cmp	r3, #0
 80080a0:	e7d9      	b.n	8008056 <scalbnf+0x4e>
 80080a2:	3019      	adds	r0, #25
 80080a4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80080a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80080ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80080d0 <scalbnf+0xc8>
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	e7d7      	b.n	8008066 <scalbnf+0x5e>
 80080b6:	bf00      	nop
 80080b8:	ffff3cb0 	.word	0xffff3cb0
 80080bc:	4c000000 	.word	0x4c000000
 80080c0:	7149f2ca 	.word	0x7149f2ca
 80080c4:	f149f2ca 	.word	0xf149f2ca
 80080c8:	0da24260 	.word	0x0da24260
 80080cc:	8da24260 	.word	0x8da24260
 80080d0:	33000000 	.word	0x33000000

080080d4 <floorf>:
 80080d4:	ee10 3a10 	vmov	r3, s0
 80080d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080dc:	3a7f      	subs	r2, #127	@ 0x7f
 80080de:	2a16      	cmp	r2, #22
 80080e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080e4:	dc2b      	bgt.n	800813e <floorf+0x6a>
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	da12      	bge.n	8008110 <floorf+0x3c>
 80080ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008150 <floorf+0x7c>
 80080ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80080f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	dd06      	ble.n	800810a <floorf+0x36>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	da24      	bge.n	800814a <floorf+0x76>
 8008100:	2900      	cmp	r1, #0
 8008102:	4b14      	ldr	r3, [pc, #80]	@ (8008154 <floorf+0x80>)
 8008104:	bf08      	it	eq
 8008106:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800810a:	ee00 3a10 	vmov	s0, r3
 800810e:	4770      	bx	lr
 8008110:	4911      	ldr	r1, [pc, #68]	@ (8008158 <floorf+0x84>)
 8008112:	4111      	asrs	r1, r2
 8008114:	420b      	tst	r3, r1
 8008116:	d0fa      	beq.n	800810e <floorf+0x3a>
 8008118:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008150 <floorf+0x7c>
 800811c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008120:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008128:	ddef      	ble.n	800810a <floorf+0x36>
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfbe      	ittt	lt
 800812e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008132:	fa40 f202 	asrlt.w	r2, r0, r2
 8008136:	189b      	addlt	r3, r3, r2
 8008138:	ea23 0301 	bic.w	r3, r3, r1
 800813c:	e7e5      	b.n	800810a <floorf+0x36>
 800813e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008142:	d3e4      	bcc.n	800810e <floorf+0x3a>
 8008144:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008148:	4770      	bx	lr
 800814a:	2300      	movs	r3, #0
 800814c:	e7dd      	b.n	800810a <floorf+0x36>
 800814e:	bf00      	nop
 8008150:	7149f2ca 	.word	0x7149f2ca
 8008154:	bf800000 	.word	0xbf800000
 8008158:	007fffff 	.word	0x007fffff

0800815c <_init>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr

08008168 <_fini>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr
